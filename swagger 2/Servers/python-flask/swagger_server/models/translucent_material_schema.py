# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TranslucentMaterialSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, r_transmittance: float=None, g_transmittance: float=None, b_transmittance: float=None, refraction: float=None, modifier: str='void'):  # noqa: E501
        """TranslucentMaterialSchema - a model defined in Swagger

        :param name: The name of this TranslucentMaterialSchema.  # noqa: E501
        :type name: str
        :param r_transmittance: The r_transmittance of this TranslucentMaterialSchema.  # noqa: E501
        :type r_transmittance: float
        :param g_transmittance: The g_transmittance of this TranslucentMaterialSchema.  # noqa: E501
        :type g_transmittance: float
        :param b_transmittance: The b_transmittance of this TranslucentMaterialSchema.  # noqa: E501
        :type b_transmittance: float
        :param refraction: The refraction of this TranslucentMaterialSchema.  # noqa: E501
        :type refraction: float
        :param modifier: The modifier of this TranslucentMaterialSchema.  # noqa: E501
        :type modifier: str
        """
        self.swagger_types = {
            'name': str,
            'r_transmittance': float,
            'g_transmittance': float,
            'b_transmittance': float,
            'refraction': float,
            'modifier': str
        }

        self.attribute_map = {
            'name': 'name',
            'r_transmittance': 'r_transmittance',
            'g_transmittance': 'g_transmittance',
            'b_transmittance': 'b_transmittance',
            'refraction': 'refraction',
            'modifier': 'modifier'
        }

        self._name = name
        self._r_transmittance = r_transmittance
        self._g_transmittance = g_transmittance
        self._b_transmittance = b_transmittance
        self._refraction = refraction
        self._modifier = modifier

    @classmethod
    def from_dict(cls, dikt) -> 'TranslucentMaterialSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TranslucentMaterialSchema of this TranslucentMaterialSchema.  # noqa: E501
        :rtype: TranslucentMaterialSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this TranslucentMaterialSchema.

        Name of the material  # noqa: E501

        :return: The name of this TranslucentMaterialSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TranslucentMaterialSchema.

        Name of the material  # noqa: E501

        :param name: The name of this TranslucentMaterialSchema.
        :type name: str
        """

        self._name = name

    @property
    def r_transmittance(self) -> float:
        """Gets the r_transmittance of this TranslucentMaterialSchema.

        Transmittance for red  # noqa: E501

        :return: The r_transmittance of this TranslucentMaterialSchema.
        :rtype: float
        """
        return self._r_transmittance

    @r_transmittance.setter
    def r_transmittance(self, r_transmittance: float):
        """Sets the r_transmittance of this TranslucentMaterialSchema.

        Transmittance for red  # noqa: E501

        :param r_transmittance: The r_transmittance of this TranslucentMaterialSchema.
        :type r_transmittance: float
        """
        if r_transmittance is not None and r_transmittance > 1:  # noqa: E501
            raise ValueError("Invalid value for `r_transmittance`, must be a value less than or equal to `1`")  # noqa: E501
        if r_transmittance is not None and r_transmittance < 0:  # noqa: E501
            raise ValueError("Invalid value for `r_transmittance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._r_transmittance = r_transmittance

    @property
    def g_transmittance(self) -> float:
        """Gets the g_transmittance of this TranslucentMaterialSchema.

        Transmittance for green  # noqa: E501

        :return: The g_transmittance of this TranslucentMaterialSchema.
        :rtype: float
        """
        return self._g_transmittance

    @g_transmittance.setter
    def g_transmittance(self, g_transmittance: float):
        """Sets the g_transmittance of this TranslucentMaterialSchema.

        Transmittance for green  # noqa: E501

        :param g_transmittance: The g_transmittance of this TranslucentMaterialSchema.
        :type g_transmittance: float
        """
        if g_transmittance is not None and g_transmittance > 1:  # noqa: E501
            raise ValueError("Invalid value for `g_transmittance`, must be a value less than or equal to `1`")  # noqa: E501
        if g_transmittance is not None and g_transmittance < 0:  # noqa: E501
            raise ValueError("Invalid value for `g_transmittance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._g_transmittance = g_transmittance

    @property
    def b_transmittance(self) -> float:
        """Gets the b_transmittance of this TranslucentMaterialSchema.

        Transmittance for blue  # noqa: E501

        :return: The b_transmittance of this TranslucentMaterialSchema.
        :rtype: float
        """
        return self._b_transmittance

    @b_transmittance.setter
    def b_transmittance(self, b_transmittance: float):
        """Sets the b_transmittance of this TranslucentMaterialSchema.

        Transmittance for blue  # noqa: E501

        :param b_transmittance: The b_transmittance of this TranslucentMaterialSchema.
        :type b_transmittance: float
        """
        if b_transmittance is not None and b_transmittance > 1:  # noqa: E501
            raise ValueError("Invalid value for `b_transmittance`, must be a value less than or equal to `1`")  # noqa: E501
        if b_transmittance is not None and b_transmittance < 0:  # noqa: E501
            raise ValueError("Invalid value for `b_transmittance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._b_transmittance = b_transmittance

    @property
    def refraction(self) -> float:
        """Gets the refraction of this TranslucentMaterialSchema.

        Index of refraction  # noqa: E501

        :return: The refraction of this TranslucentMaterialSchema.
        :rtype: float
        """
        return self._refraction

    @refraction.setter
    def refraction(self, refraction: float):
        """Sets the refraction of this TranslucentMaterialSchema.

        Index of refraction  # noqa: E501

        :param refraction: The refraction of this TranslucentMaterialSchema.
        :type refraction: float
        """
        if refraction is not None and refraction > 1:  # noqa: E501
            raise ValueError("Invalid value for `refraction`, must be a value less than or equal to `1`")  # noqa: E501
        if refraction is not None and refraction < 0:  # noqa: E501
            raise ValueError("Invalid value for `refraction`, must be a value greater than or equal to `0`")  # noqa: E501

        self._refraction = refraction

    @property
    def modifier(self) -> str:
        """Gets the modifier of this TranslucentMaterialSchema.


        :return: The modifier of this TranslucentMaterialSchema.
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier: str):
        """Sets the modifier of this TranslucentMaterialSchema.


        :param modifier: The modifier of this TranslucentMaterialSchema.
        :type modifier: str
        """

        self._modifier = modifier
