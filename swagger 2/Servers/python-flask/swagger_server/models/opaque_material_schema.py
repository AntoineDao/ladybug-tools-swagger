# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OpaqueMaterialSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, r_reflectance: float=None, g_reflectance: float=None, b_reflectance: float=None, refraction: float=None, specularity: float=None, roughness: float=None, modifier: str='void'):  # noqa: E501
        """OpaqueMaterialSchema - a model defined in Swagger

        :param name: The name of this OpaqueMaterialSchema.  # noqa: E501
        :type name: str
        :param type: The type of this OpaqueMaterialSchema.  # noqa: E501
        :type type: str
        :param r_reflectance: The r_reflectance of this OpaqueMaterialSchema.  # noqa: E501
        :type r_reflectance: float
        :param g_reflectance: The g_reflectance of this OpaqueMaterialSchema.  # noqa: E501
        :type g_reflectance: float
        :param b_reflectance: The b_reflectance of this OpaqueMaterialSchema.  # noqa: E501
        :type b_reflectance: float
        :param refraction: The refraction of this OpaqueMaterialSchema.  # noqa: E501
        :type refraction: float
        :param specularity: The specularity of this OpaqueMaterialSchema.  # noqa: E501
        :type specularity: float
        :param roughness: The roughness of this OpaqueMaterialSchema.  # noqa: E501
        :type roughness: float
        :param modifier: The modifier of this OpaqueMaterialSchema.  # noqa: E501
        :type modifier: str
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            'r_reflectance': float,
            'g_reflectance': float,
            'b_reflectance': float,
            'refraction': float,
            'specularity': float,
            'roughness': float,
            'modifier': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'r_reflectance': 'r_reflectance',
            'g_reflectance': 'g_reflectance',
            'b_reflectance': 'b_reflectance',
            'refraction': 'refraction',
            'specularity': 'specularity',
            'roughness': 'roughness',
            'modifier': 'modifier'
        }

        self._name = name
        self._type = type
        self._r_reflectance = r_reflectance
        self._g_reflectance = g_reflectance
        self._b_reflectance = b_reflectance
        self._refraction = refraction
        self._specularity = specularity
        self._roughness = roughness
        self._modifier = modifier

    @classmethod
    def from_dict(cls, dikt) -> 'OpaqueMaterialSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OpaqueMaterialSchema of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: OpaqueMaterialSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this OpaqueMaterialSchema.

        Name of the material  # noqa: E501

        :return: The name of this OpaqueMaterialSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this OpaqueMaterialSchema.

        Name of the material  # noqa: E501

        :param name: The name of this OpaqueMaterialSchema.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this OpaqueMaterialSchema.

        Material type  # noqa: E501

        :return: The type of this OpaqueMaterialSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this OpaqueMaterialSchema.

        Material type  # noqa: E501

        :param type: The type of this OpaqueMaterialSchema.
        :type type: str
        """
        allowed_values = ["metal", "plastic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def r_reflectance(self) -> float:
        """Gets the r_reflectance of this OpaqueMaterialSchema.

        Reflectance for red  # noqa: E501

        :return: The r_reflectance of this OpaqueMaterialSchema.
        :rtype: float
        """
        return self._r_reflectance

    @r_reflectance.setter
    def r_reflectance(self, r_reflectance: float):
        """Sets the r_reflectance of this OpaqueMaterialSchema.

        Reflectance for red  # noqa: E501

        :param r_reflectance: The r_reflectance of this OpaqueMaterialSchema.
        :type r_reflectance: float
        """
        if r_reflectance is not None and r_reflectance > 1:  # noqa: E501
            raise ValueError("Invalid value for `r_reflectance`, must be a value less than or equal to `1`")  # noqa: E501
        if r_reflectance is not None and r_reflectance < 0:  # noqa: E501
            raise ValueError("Invalid value for `r_reflectance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._r_reflectance = r_reflectance

    @property
    def g_reflectance(self) -> float:
        """Gets the g_reflectance of this OpaqueMaterialSchema.

        Reflectance for green  # noqa: E501

        :return: The g_reflectance of this OpaqueMaterialSchema.
        :rtype: float
        """
        return self._g_reflectance

    @g_reflectance.setter
    def g_reflectance(self, g_reflectance: float):
        """Sets the g_reflectance of this OpaqueMaterialSchema.

        Reflectance for green  # noqa: E501

        :param g_reflectance: The g_reflectance of this OpaqueMaterialSchema.
        :type g_reflectance: float
        """
        if g_reflectance is not None and g_reflectance > 1:  # noqa: E501
            raise ValueError("Invalid value for `g_reflectance`, must be a value less than or equal to `1`")  # noqa: E501
        if g_reflectance is not None and g_reflectance < 0:  # noqa: E501
            raise ValueError("Invalid value for `g_reflectance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._g_reflectance = g_reflectance

    @property
    def b_reflectance(self) -> float:
        """Gets the b_reflectance of this OpaqueMaterialSchema.

        Reflectance for blue  # noqa: E501

        :return: The b_reflectance of this OpaqueMaterialSchema.
        :rtype: float
        """
        return self._b_reflectance

    @b_reflectance.setter
    def b_reflectance(self, b_reflectance: float):
        """Sets the b_reflectance of this OpaqueMaterialSchema.

        Reflectance for blue  # noqa: E501

        :param b_reflectance: The b_reflectance of this OpaqueMaterialSchema.
        :type b_reflectance: float
        """
        if b_reflectance is not None and b_reflectance > 1:  # noqa: E501
            raise ValueError("Invalid value for `b_reflectance`, must be a value less than or equal to `1`")  # noqa: E501
        if b_reflectance is not None and b_reflectance < 0:  # noqa: E501
            raise ValueError("Invalid value for `b_reflectance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._b_reflectance = b_reflectance

    @property
    def refraction(self) -> float:
        """Gets the refraction of this OpaqueMaterialSchema.

        Index of refraction  # noqa: E501

        :return: The refraction of this OpaqueMaterialSchema.
        :rtype: float
        """
        return self._refraction

    @refraction.setter
    def refraction(self, refraction: float):
        """Sets the refraction of this OpaqueMaterialSchema.

        Index of refraction  # noqa: E501

        :param refraction: The refraction of this OpaqueMaterialSchema.
        :type refraction: float
        """
        if refraction is not None and refraction > 1:  # noqa: E501
            raise ValueError("Invalid value for `refraction`, must be a value less than or equal to `1`")  # noqa: E501
        if refraction is not None and refraction < 0:  # noqa: E501
            raise ValueError("Invalid value for `refraction`, must be a value greater than or equal to `0`")  # noqa: E501

        self._refraction = refraction

    @property
    def specularity(self) -> float:
        """Gets the specularity of this OpaqueMaterialSchema.

        Material specularity  # noqa: E501

        :return: The specularity of this OpaqueMaterialSchema.
        :rtype: float
        """
        return self._specularity

    @specularity.setter
    def specularity(self, specularity: float):
        """Sets the specularity of this OpaqueMaterialSchema.

        Material specularity  # noqa: E501

        :param specularity: The specularity of this OpaqueMaterialSchema.
        :type specularity: float
        """

        self._specularity = specularity

    @property
    def roughness(self) -> float:
        """Gets the roughness of this OpaqueMaterialSchema.

        Material roughness  # noqa: E501

        :return: The roughness of this OpaqueMaterialSchema.
        :rtype: float
        """
        return self._roughness

    @roughness.setter
    def roughness(self, roughness: float):
        """Sets the roughness of this OpaqueMaterialSchema.

        Material roughness  # noqa: E501

        :param roughness: The roughness of this OpaqueMaterialSchema.
        :type roughness: float
        """

        self._roughness = roughness

    @property
    def modifier(self) -> str:
        """Gets the modifier of this OpaqueMaterialSchema.


        :return: The modifier of this OpaqueMaterialSchema.
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier: str):
        """Sets the modifier of this OpaqueMaterialSchema.


        :param modifier: The modifier of this OpaqueMaterialSchema.
        :type modifier: str
        """

        self._modifier = modifier
