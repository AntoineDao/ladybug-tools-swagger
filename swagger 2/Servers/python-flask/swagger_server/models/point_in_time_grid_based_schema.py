# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.analysis_grid_schema import AnalysisGridSchema  # noqa: F401,E501
from swagger_server.models.analysis_type import AnalysisType  # noqa: F401,E501
from swagger_server.models.hb_surface_schema import HBSurfaceSchema  # noqa: F401,E501
from swagger_server.models.radiance_parameters import RadianceParameters  # noqa: F401,E501
from swagger_server.models.sky_schema import SkySchema  # noqa: F401,E501
from swagger_server import util


class PointInTimeGridBasedSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: str=None, analysis_grids: List[AnalysisGridSchema]=None, surfaces: List[HBSurfaceSchema]=None, sky: SkySchema=None, analysis_type: AnalysisType=None, rad_parameters: RadianceParameters=None):  # noqa: E501
        """PointInTimeGridBasedSchema - a model defined in Swagger

        :param id: The id of this PointInTimeGridBasedSchema.  # noqa: E501
        :type id: str
        :param type: The type of this PointInTimeGridBasedSchema.  # noqa: E501
        :type type: str
        :param analysis_grids: The analysis_grids of this PointInTimeGridBasedSchema.  # noqa: E501
        :type analysis_grids: List[AnalysisGridSchema]
        :param surfaces: The surfaces of this PointInTimeGridBasedSchema.  # noqa: E501
        :type surfaces: List[HBSurfaceSchema]
        :param sky: The sky of this PointInTimeGridBasedSchema.  # noqa: E501
        :type sky: SkySchema
        :param analysis_type: The analysis_type of this PointInTimeGridBasedSchema.  # noqa: E501
        :type analysis_type: AnalysisType
        :param rad_parameters: The rad_parameters of this PointInTimeGridBasedSchema.  # noqa: E501
        :type rad_parameters: RadianceParameters
        """
        self.swagger_types = {
            'id': str,
            'type': str,
            'analysis_grids': List[AnalysisGridSchema],
            'surfaces': List[HBSurfaceSchema],
            'sky': SkySchema,
            'analysis_type': AnalysisType,
            'rad_parameters': RadianceParameters
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'analysis_grids': 'analysis_grids',
            'surfaces': 'surfaces',
            'sky': 'sky',
            'analysis_type': 'analysis_type',
            'rad_parameters': 'rad_parameters'
        }

        self._id = id
        self._type = type
        self._analysis_grids = analysis_grids
        self._surfaces = surfaces
        self._sky = sky
        self._analysis_type = analysis_type
        self._rad_parameters = rad_parameters

    @classmethod
    def from_dict(cls, dikt) -> 'PointInTimeGridBasedSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PointInTimeGridBasedSchema of this PointInTimeGridBasedSchema.  # noqa: E501
        :rtype: PointInTimeGridBasedSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this PointInTimeGridBasedSchema.


        :return: The id of this PointInTimeGridBasedSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PointInTimeGridBasedSchema.


        :param id: The id of this PointInTimeGridBasedSchema.
        :type id: str
        """
        allowed_values = ["point_in_time"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this PointInTimeGridBasedSchema.


        :return: The type of this PointInTimeGridBasedSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this PointInTimeGridBasedSchema.


        :param type: The type of this PointInTimeGridBasedSchema.
        :type type: str
        """
        allowed_values = ["gridbased"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def analysis_grids(self) -> List[AnalysisGridSchema]:
        """Gets the analysis_grids of this PointInTimeGridBasedSchema.


        :return: The analysis_grids of this PointInTimeGridBasedSchema.
        :rtype: List[AnalysisGridSchema]
        """
        return self._analysis_grids

    @analysis_grids.setter
    def analysis_grids(self, analysis_grids: List[AnalysisGridSchema]):
        """Sets the analysis_grids of this PointInTimeGridBasedSchema.


        :param analysis_grids: The analysis_grids of this PointInTimeGridBasedSchema.
        :type analysis_grids: List[AnalysisGridSchema]
        """

        self._analysis_grids = analysis_grids

    @property
    def surfaces(self) -> List[HBSurfaceSchema]:
        """Gets the surfaces of this PointInTimeGridBasedSchema.


        :return: The surfaces of this PointInTimeGridBasedSchema.
        :rtype: List[HBSurfaceSchema]
        """
        return self._surfaces

    @surfaces.setter
    def surfaces(self, surfaces: List[HBSurfaceSchema]):
        """Sets the surfaces of this PointInTimeGridBasedSchema.


        :param surfaces: The surfaces of this PointInTimeGridBasedSchema.
        :type surfaces: List[HBSurfaceSchema]
        """

        self._surfaces = surfaces

    @property
    def sky(self) -> SkySchema:
        """Gets the sky of this PointInTimeGridBasedSchema.


        :return: The sky of this PointInTimeGridBasedSchema.
        :rtype: SkySchema
        """
        return self._sky

    @sky.setter
    def sky(self, sky: SkySchema):
        """Sets the sky of this PointInTimeGridBasedSchema.


        :param sky: The sky of this PointInTimeGridBasedSchema.
        :type sky: SkySchema
        """

        self._sky = sky

    @property
    def analysis_type(self) -> AnalysisType:
        """Gets the analysis_type of this PointInTimeGridBasedSchema.


        :return: The analysis_type of this PointInTimeGridBasedSchema.
        :rtype: AnalysisType
        """
        return self._analysis_type

    @analysis_type.setter
    def analysis_type(self, analysis_type: AnalysisType):
        """Sets the analysis_type of this PointInTimeGridBasedSchema.


        :param analysis_type: The analysis_type of this PointInTimeGridBasedSchema.
        :type analysis_type: AnalysisType
        """

        self._analysis_type = analysis_type

    @property
    def rad_parameters(self) -> RadianceParameters:
        """Gets the rad_parameters of this PointInTimeGridBasedSchema.


        :return: The rad_parameters of this PointInTimeGridBasedSchema.
        :rtype: RadianceParameters
        """
        return self._rad_parameters

    @rad_parameters.setter
    def rad_parameters(self, rad_parameters: RadianceParameters):
        """Sets the rad_parameters of this PointInTimeGridBasedSchema.


        :param rad_parameters: The rad_parameters of this PointInTimeGridBasedSchema.
        :type rad_parameters: RadianceParameters
        """

        self._rad_parameters = rad_parameters
