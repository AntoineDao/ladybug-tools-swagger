# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LocationSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, latitude: float=None, longitude: float=None, time_zone: str=None, elevation: float=None):  # noqa: E501
        """LocationSchema - a model defined in Swagger

        :param city: The city of this LocationSchema.  # noqa: E501
        :type city: str
        :param latitude: The latitude of this LocationSchema.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this LocationSchema.  # noqa: E501
        :type longitude: float
        :param time_zone: The time_zone of this LocationSchema.  # noqa: E501
        :type time_zone: str
        :param elevation: The elevation of this LocationSchema.  # noqa: E501
        :type elevation: float
        """
        self.swagger_types = {
            'city': str,
            'latitude': float,
            'longitude': float,
            'time_zone': str,
            'elevation': float
        }

        self.attribute_map = {
            'city': 'city',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'time_zone': 'time_zone',
            'elevation': 'elevation'
        }

        self._city = city
        self._latitude = latitude
        self._longitude = longitude
        self._time_zone = time_zone
        self._elevation = elevation

    @classmethod
    def from_dict(cls, dikt) -> 'LocationSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocationSchema of this LocationSchema.  # noqa: E501
        :rtype: LocationSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self) -> str:
        """Gets the city of this LocationSchema.


        :return: The city of this LocationSchema.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this LocationSchema.


        :param city: The city of this LocationSchema.
        :type city: str
        """

        self._city = city

    @property
    def latitude(self) -> float:
        """Gets the latitude of this LocationSchema.

        minvalue -90 and max value 90  # noqa: E501

        :return: The latitude of this LocationSchema.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this LocationSchema.

        minvalue -90 and max value 90  # noqa: E501

        :param latitude: The latitude of this LocationSchema.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this LocationSchema.

        minvalue -180 and max value 180  # noqa: E501

        :return: The longitude of this LocationSchema.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this LocationSchema.

        minvalue -180 and max value 180  # noqa: E501

        :param longitude: The longitude of this LocationSchema.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def time_zone(self) -> str:
        """Gets the time_zone of this LocationSchema.


        :return: The time_zone of this LocationSchema.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone: str):
        """Sets the time_zone of this LocationSchema.


        :param time_zone: The time_zone of this LocationSchema.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def elevation(self) -> float:
        """Gets the elevation of this LocationSchema.


        :return: The elevation of this LocationSchema.
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation: float):
        """Sets the elevation of this LocationSchema.


        :param elevation: The elevation of this LocationSchema.
        :type elevation: float
        """

        self._elevation = elevation
