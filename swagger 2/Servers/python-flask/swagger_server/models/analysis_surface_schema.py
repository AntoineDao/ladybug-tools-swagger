# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.analysis_surface_schema_rad_properties import AnalysisSurfaceSchemaRadProperties  # noqa: F401,E501
from swagger_server.models.surface_state_schema import SurfaceStateSchema  # noqa: F401,E501
from swagger_server.models.vertex_schema import VertexSchema  # noqa: F401,E501
from swagger_server import util


class AnalysisSurfaceSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, surface_type: float=None, vertices: List[VertexSchema]=None, rad_properties: AnalysisSurfaceSchemaRadProperties=None, surface_states: List[SurfaceStateSchema]=None):  # noqa: E501
        """AnalysisSurfaceSchema - a model defined in Swagger

        :param name: The name of this AnalysisSurfaceSchema.  # noqa: E501
        :type name: str
        :param surface_type: The surface_type of this AnalysisSurfaceSchema.  # noqa: E501
        :type surface_type: float
        :param vertices: The vertices of this AnalysisSurfaceSchema.  # noqa: E501
        :type vertices: List[VertexSchema]
        :param rad_properties: The rad_properties of this AnalysisSurfaceSchema.  # noqa: E501
        :type rad_properties: AnalysisSurfaceSchemaRadProperties
        :param surface_states: The surface_states of this AnalysisSurfaceSchema.  # noqa: E501
        :type surface_states: List[SurfaceStateSchema]
        """
        self.swagger_types = {
            'name': str,
            'surface_type': float,
            'vertices': List[VertexSchema],
            'rad_properties': AnalysisSurfaceSchemaRadProperties,
            'surface_states': List[SurfaceStateSchema]
        }

        self.attribute_map = {
            'name': 'name',
            'surface_type': 'surface_type',
            'vertices': 'vertices',
            'rad_properties': 'rad_properties',
            'surface_states': 'surface_states'
        }

        self._name = name
        self._surface_type = surface_type
        self._vertices = vertices
        self._rad_properties = rad_properties
        self._surface_states = surface_states

    @classmethod
    def from_dict(cls, dikt) -> 'AnalysisSurfaceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisSurfaceSchema of this AnalysisSurfaceSchema.  # noqa: E501
        :rtype: AnalysisSurfaceSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this AnalysisSurfaceSchema.

        The name of the surface  # noqa: E501

        :return: The name of this AnalysisSurfaceSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AnalysisSurfaceSchema.

        The name of the surface  # noqa: E501

        :param name: The name of this AnalysisSurfaceSchema.
        :type name: str
        """

        self._name = name

    @property
    def surface_type(self) -> float:
        """Gets the surface_type of this AnalysisSurfaceSchema.

        0.0=Wall, 0.5=UndergroundWall, 1.0=Roof, 1.5=UndergroundCeiling, 2.0=Floor, 2.5=SlabOnGrade, 2.75=ExposedFloor, 3.0=Ceiling, 5.0=Window, 6.0=Context  # noqa: E501

        :return: The surface_type of this AnalysisSurfaceSchema.
        :rtype: float
        """
        return self._surface_type

    @surface_type.setter
    def surface_type(self, surface_type: float):
        """Sets the surface_type of this AnalysisSurfaceSchema.

        0.0=Wall, 0.5=UndergroundWall, 1.0=Roof, 1.5=UndergroundCeiling, 2.0=Floor, 2.5=SlabOnGrade, 2.75=ExposedFloor, 3.0=Ceiling, 5.0=Window, 6.0=Context  # noqa: E501

        :param surface_type: The surface_type of this AnalysisSurfaceSchema.
        :type surface_type: float
        """
        if surface_type is not None and surface_type > 6:  # noqa: E501
            raise ValueError("Invalid value for `surface_type`, must be a value less than or equal to `6`")  # noqa: E501
        if surface_type is not None and surface_type < 0:  # noqa: E501
            raise ValueError("Invalid value for `surface_type`, must be a value greater than or equal to `0`")  # noqa: E501

        self._surface_type = surface_type

    @property
    def vertices(self) -> List[VertexSchema]:
        """Gets the vertices of this AnalysisSurfaceSchema.


        :return: The vertices of this AnalysisSurfaceSchema.
        :rtype: List[VertexSchema]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices: List[VertexSchema]):
        """Sets the vertices of this AnalysisSurfaceSchema.


        :param vertices: The vertices of this AnalysisSurfaceSchema.
        :type vertices: List[VertexSchema]
        """

        self._vertices = vertices

    @property
    def rad_properties(self) -> AnalysisSurfaceSchemaRadProperties:
        """Gets the rad_properties of this AnalysisSurfaceSchema.


        :return: The rad_properties of this AnalysisSurfaceSchema.
        :rtype: AnalysisSurfaceSchemaRadProperties
        """
        return self._rad_properties

    @rad_properties.setter
    def rad_properties(self, rad_properties: AnalysisSurfaceSchemaRadProperties):
        """Sets the rad_properties of this AnalysisSurfaceSchema.


        :param rad_properties: The rad_properties of this AnalysisSurfaceSchema.
        :type rad_properties: AnalysisSurfaceSchemaRadProperties
        """

        self._rad_properties = rad_properties

    @property
    def surface_states(self) -> List[SurfaceStateSchema]:
        """Gets the surface_states of this AnalysisSurfaceSchema.


        :return: The surface_states of this AnalysisSurfaceSchema.
        :rtype: List[SurfaceStateSchema]
        """
        return self._surface_states

    @surface_states.setter
    def surface_states(self, surface_states: List[SurfaceStateSchema]):
        """Sets the surface_states of this AnalysisSurfaceSchema.


        :param surface_states: The surface_states of this AnalysisSurfaceSchema.
        :type surface_states: List[SurfaceStateSchema]
        """

        self._surface_states = surface_states
