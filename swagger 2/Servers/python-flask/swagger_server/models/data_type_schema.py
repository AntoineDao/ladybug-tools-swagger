# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DataTypeSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, standard: str=None, nickname: str='null'):  # noqa: E501
        """DataTypeSchema - a model defined in Swagger

        :param standard: The standard of this DataTypeSchema.  # noqa: E501
        :type standard: str
        :param nickname: The nickname of this DataTypeSchema.  # noqa: E501
        :type nickname: str
        """
        self.swagger_types = {
            'standard': str,
            'nickname': str
        }

        self.attribute_map = {
            'standard': 'standard',
            'nickname': 'nickname'
        }

        self._standard = standard
        self._nickname = nickname

    @classmethod
    def from_dict(cls, dikt) -> 'DataTypeSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataTypeSchema of this DataTypeSchema.  # noqa: E501
        :rtype: DataTypeSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def standard(self) -> str:
        """Gets the standard of this DataTypeSchema.


        :return: The standard of this DataTypeSchema.
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard: str):
        """Sets the standard of this DataTypeSchema.


        :param standard: The standard of this DataTypeSchema.
        :type standard: str
        """
        allowed_values = ["SI", "IP"]  # noqa: E501
        if standard not in allowed_values:
            raise ValueError(
                "Invalid value for `standard` ({0}), must be one of {1}"
                .format(standard, allowed_values)
            )

        self._standard = standard

    @property
    def nickname(self) -> str:
        """Gets the nickname of this DataTypeSchema.


        :return: The nickname of this DataTypeSchema.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname: str):
        """Sets the nickname of this DataTypeSchema.


        :param nickname: The nickname of this DataTypeSchema.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")  # noqa: E501

        self._nickname = nickname
