# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BSDFMaterialSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, xml_data: str=None, up_orientation: float=None, thickness: float=None, modifier: str='void'):  # noqa: E501
        """BSDFMaterialSchema - a model defined in Swagger

        :param name: The name of this BSDFMaterialSchema.  # noqa: E501
        :type name: str
        :param xml_data: The xml_data of this BSDFMaterialSchema.  # noqa: E501
        :type xml_data: str
        :param up_orientation: The up_orientation of this BSDFMaterialSchema.  # noqa: E501
        :type up_orientation: float
        :param thickness: The thickness of this BSDFMaterialSchema.  # noqa: E501
        :type thickness: float
        :param modifier: The modifier of this BSDFMaterialSchema.  # noqa: E501
        :type modifier: str
        """
        self.swagger_types = {
            'name': str,
            'xml_data': str,
            'up_orientation': float,
            'thickness': float,
            'modifier': str
        }

        self.attribute_map = {
            'name': 'name',
            'xml_data': 'xml_data',
            'up_orientation': 'up_orientation',
            'thickness': 'thickness',
            'modifier': 'modifier'
        }

        self._name = name
        self._xml_data = xml_data
        self._up_orientation = up_orientation
        self._thickness = thickness
        self._modifier = modifier

    @classmethod
    def from_dict(cls, dikt) -> 'BSDFMaterialSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BSDFMaterialSchema of this BSDFMaterialSchema.  # noqa: E501
        :rtype: BSDFMaterialSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this BSDFMaterialSchema.

        Name of the material  # noqa: E501

        :return: The name of this BSDFMaterialSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BSDFMaterialSchema.

        Name of the material  # noqa: E501

        :param name: The name of this BSDFMaterialSchema.
        :type name: str
        """

        self._name = name

    @property
    def xml_data(self) -> str:
        """Gets the xml_data of this BSDFMaterialSchema.

        A string of the original XML  # noqa: E501

        :return: The xml_data of this BSDFMaterialSchema.
        :rtype: str
        """
        return self._xml_data

    @xml_data.setter
    def xml_data(self, xml_data: str):
        """Sets the xml_data of this BSDFMaterialSchema.

        A string of the original XML  # noqa: E501

        :param xml_data: The xml_data of this BSDFMaterialSchema.
        :type xml_data: str
        """

        self._xml_data = xml_data

    @property
    def up_orientation(self) -> float:
        """Gets the up_orientation of this BSDFMaterialSchema.


        :return: The up_orientation of this BSDFMaterialSchema.
        :rtype: float
        """
        return self._up_orientation

    @up_orientation.setter
    def up_orientation(self, up_orientation: float):
        """Sets the up_orientation of this BSDFMaterialSchema.


        :param up_orientation: The up_orientation of this BSDFMaterialSchema.
        :type up_orientation: float
        """

        self._up_orientation = up_orientation

    @property
    def thickness(self) -> float:
        """Gets the thickness of this BSDFMaterialSchema.


        :return: The thickness of this BSDFMaterialSchema.
        :rtype: float
        """
        return self._thickness

    @thickness.setter
    def thickness(self, thickness: float):
        """Sets the thickness of this BSDFMaterialSchema.


        :param thickness: The thickness of this BSDFMaterialSchema.
        :type thickness: float
        """

        self._thickness = thickness

    @property
    def modifier(self) -> str:
        """Gets the modifier of this BSDFMaterialSchema.


        :return: The modifier of this BSDFMaterialSchema.
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier: str):
        """Sets the modifier of this BSDFMaterialSchema.


        :param modifier: The modifier of this BSDFMaterialSchema.
        :type modifier: str
        """

        self._modifier = modifier
