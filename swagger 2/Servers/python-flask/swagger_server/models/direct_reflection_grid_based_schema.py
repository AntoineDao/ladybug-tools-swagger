# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.analysis_grid_schema import AnalysisGridSchema  # noqa: F401,E501
from swagger_server.models.hb_surface_schema import HBSurfaceSchema  # noqa: F401,E501
from swagger_server.models.hoys_schema import HoysSchema  # noqa: F401,E501
from swagger_server.models.location_schema import LocationSchema  # noqa: F401,E501
from swagger_server.models.vector_schema import VectorSchema  # noqa: F401,E501
from swagger_server import util


class DirectReflectionGridBasedSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: str=None, analysis_grids: List[AnalysisGridSchema]=None, surfaces: List[HBSurfaceSchema]=None, location: LocationSchema=None, hoys: HoysSchema=None, sun_vectors: List[VectorSchema]=None):  # noqa: E501
        """DirectReflectionGridBasedSchema - a model defined in Swagger

        :param id: The id of this DirectReflectionGridBasedSchema.  # noqa: E501
        :type id: str
        :param type: The type of this DirectReflectionGridBasedSchema.  # noqa: E501
        :type type: str
        :param analysis_grids: The analysis_grids of this DirectReflectionGridBasedSchema.  # noqa: E501
        :type analysis_grids: List[AnalysisGridSchema]
        :param surfaces: The surfaces of this DirectReflectionGridBasedSchema.  # noqa: E501
        :type surfaces: List[HBSurfaceSchema]
        :param location: The location of this DirectReflectionGridBasedSchema.  # noqa: E501
        :type location: LocationSchema
        :param hoys: The hoys of this DirectReflectionGridBasedSchema.  # noqa: E501
        :type hoys: HoysSchema
        :param sun_vectors: The sun_vectors of this DirectReflectionGridBasedSchema.  # noqa: E501
        :type sun_vectors: List[VectorSchema]
        """
        self.swagger_types = {
            'id': str,
            'type': str,
            'analysis_grids': List[AnalysisGridSchema],
            'surfaces': List[HBSurfaceSchema],
            'location': LocationSchema,
            'hoys': HoysSchema,
            'sun_vectors': List[VectorSchema]
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'analysis_grids': 'analysis_grids',
            'surfaces': 'surfaces',
            'location': 'location',
            'hoys': 'hoys',
            'sun_vectors': 'sun_vectors'
        }

        self._id = id
        self._type = type
        self._analysis_grids = analysis_grids
        self._surfaces = surfaces
        self._location = location
        self._hoys = hoys
        self._sun_vectors = sun_vectors

    @classmethod
    def from_dict(cls, dikt) -> 'DirectReflectionGridBasedSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DirectReflectionGridBasedSchema of this DirectReflectionGridBasedSchema.  # noqa: E501
        :rtype: DirectReflectionGridBasedSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DirectReflectionGridBasedSchema.


        :return: The id of this DirectReflectionGridBasedSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DirectReflectionGridBasedSchema.


        :param id: The id of this DirectReflectionGridBasedSchema.
        :type id: str
        """
        allowed_values = ["direct_reflection"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this DirectReflectionGridBasedSchema.


        :return: The type of this DirectReflectionGridBasedSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this DirectReflectionGridBasedSchema.


        :param type: The type of this DirectReflectionGridBasedSchema.
        :type type: str
        """
        allowed_values = ["gridbased"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def analysis_grids(self) -> List[AnalysisGridSchema]:
        """Gets the analysis_grids of this DirectReflectionGridBasedSchema.


        :return: The analysis_grids of this DirectReflectionGridBasedSchema.
        :rtype: List[AnalysisGridSchema]
        """
        return self._analysis_grids

    @analysis_grids.setter
    def analysis_grids(self, analysis_grids: List[AnalysisGridSchema]):
        """Sets the analysis_grids of this DirectReflectionGridBasedSchema.


        :param analysis_grids: The analysis_grids of this DirectReflectionGridBasedSchema.
        :type analysis_grids: List[AnalysisGridSchema]
        """

        self._analysis_grids = analysis_grids

    @property
    def surfaces(self) -> List[HBSurfaceSchema]:
        """Gets the surfaces of this DirectReflectionGridBasedSchema.


        :return: The surfaces of this DirectReflectionGridBasedSchema.
        :rtype: List[HBSurfaceSchema]
        """
        return self._surfaces

    @surfaces.setter
    def surfaces(self, surfaces: List[HBSurfaceSchema]):
        """Sets the surfaces of this DirectReflectionGridBasedSchema.


        :param surfaces: The surfaces of this DirectReflectionGridBasedSchema.
        :type surfaces: List[HBSurfaceSchema]
        """

        self._surfaces = surfaces

    @property
    def location(self) -> LocationSchema:
        """Gets the location of this DirectReflectionGridBasedSchema.


        :return: The location of this DirectReflectionGridBasedSchema.
        :rtype: LocationSchema
        """
        return self._location

    @location.setter
    def location(self, location: LocationSchema):
        """Sets the location of this DirectReflectionGridBasedSchema.


        :param location: The location of this DirectReflectionGridBasedSchema.
        :type location: LocationSchema
        """

        self._location = location

    @property
    def hoys(self) -> HoysSchema:
        """Gets the hoys of this DirectReflectionGridBasedSchema.


        :return: The hoys of this DirectReflectionGridBasedSchema.
        :rtype: HoysSchema
        """
        return self._hoys

    @hoys.setter
    def hoys(self, hoys: HoysSchema):
        """Sets the hoys of this DirectReflectionGridBasedSchema.


        :param hoys: The hoys of this DirectReflectionGridBasedSchema.
        :type hoys: HoysSchema
        """

        self._hoys = hoys

    @property
    def sun_vectors(self) -> List[VectorSchema]:
        """Gets the sun_vectors of this DirectReflectionGridBasedSchema.

        A list of vectors if location is not provided  # noqa: E501

        :return: The sun_vectors of this DirectReflectionGridBasedSchema.
        :rtype: List[VectorSchema]
        """
        return self._sun_vectors

    @sun_vectors.setter
    def sun_vectors(self, sun_vectors: List[VectorSchema]):
        """Sets the sun_vectors of this DirectReflectionGridBasedSchema.

        A list of vectors if location is not provided  # noqa: E501

        :param sun_vectors: The sun_vectors of this DirectReflectionGridBasedSchema.
        :type sun_vectors: List[VectorSchema]
        """

        self._sun_vectors = sun_vectors
