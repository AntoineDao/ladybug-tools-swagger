# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.location_schema import LocationSchema  # noqa: F401,E501
from swagger_server import util


class SkySchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, location: LocationSchema=None, hour: int=None, day: int=None, month: int=None, north: float=None, sky_type: int=None):  # noqa: E501
        """SkySchema - a model defined in Swagger

        :param location: The location of this SkySchema.  # noqa: E501
        :type location: LocationSchema
        :param hour: The hour of this SkySchema.  # noqa: E501
        :type hour: int
        :param day: The day of this SkySchema.  # noqa: E501
        :type day: int
        :param month: The month of this SkySchema.  # noqa: E501
        :type month: int
        :param north: The north of this SkySchema.  # noqa: E501
        :type north: float
        :param sky_type: The sky_type of this SkySchema.  # noqa: E501
        :type sky_type: int
        """
        self.swagger_types = {
            'location': LocationSchema,
            'hour': int,
            'day': int,
            'month': int,
            'north': float,
            'sky_type': int
        }

        self.attribute_map = {
            'location': 'location',
            'hour': 'hour',
            'day': 'day',
            'month': 'month',
            'north': 'north',
            'sky_type': 'sky_type'
        }

        self._location = location
        self._hour = hour
        self._day = day
        self._month = month
        self._north = north
        self._sky_type = sky_type

    @classmethod
    def from_dict(cls, dikt) -> 'SkySchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SkySchema of this SkySchema.  # noqa: E501
        :rtype: SkySchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self) -> LocationSchema:
        """Gets the location of this SkySchema.


        :return: The location of this SkySchema.
        :rtype: LocationSchema
        """
        return self._location

    @location.setter
    def location(self, location: LocationSchema):
        """Sets the location of this SkySchema.


        :param location: The location of this SkySchema.
        :type location: LocationSchema
        """

        self._location = location

    @property
    def hour(self) -> int:
        """Gets the hour of this SkySchema.

        hour of the day - minvalue 0 and max value 23  # noqa: E501

        :return: The hour of this SkySchema.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour: int):
        """Sets the hour of this SkySchema.

        hour of the day - minvalue 0 and max value 23  # noqa: E501

        :param hour: The hour of this SkySchema.
        :type hour: int
        """

        self._hour = hour

    @property
    def day(self) -> int:
        """Gets the day of this SkySchema.

        day of the month - minvalue 1 and max value 31  # noqa: E501

        :return: The day of this SkySchema.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day: int):
        """Sets the day of this SkySchema.

        day of the month - minvalue 1 and max value 31  # noqa: E501

        :param day: The day of this SkySchema.
        :type day: int
        """

        self._day = day

    @property
    def month(self) -> int:
        """Gets the month of this SkySchema.

        month of the year - minvalue 1 and max value 12  # noqa: E501

        :return: The month of this SkySchema.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month: int):
        """Sets the month of this SkySchema.

        month of the year - minvalue 1 and max value 12  # noqa: E501

        :param month: The month of this SkySchema.
        :type month: int
        """

        self._month = month

    @property
    def north(self) -> float:
        """Gets the north of this SkySchema.

        angle in degrees between 0-360 to indicate North  # noqa: E501

        :return: The north of this SkySchema.
        :rtype: float
        """
        return self._north

    @north.setter
    def north(self, north: float):
        """Sets the north of this SkySchema.

        angle in degrees between 0-360 to indicate North  # noqa: E501

        :param north: The north of this SkySchema.
        :type north: float
        """

        self._north = north

    @property
    def sky_type(self) -> int:
        """Gets the sky_type of this SkySchema.

        0 - Sunny with sun, 1 - sunny without sun, 2 - intermediate with sun, 3 - intermediate without sun, 4 - cloudy sky, 5 - uniform sky  # noqa: E501

        :return: The sky_type of this SkySchema.
        :rtype: int
        """
        return self._sky_type

    @sky_type.setter
    def sky_type(self, sky_type: int):
        """Sets the sky_type of this SkySchema.

        0 - Sunny with sun, 1 - sunny without sun, 2 - intermediate with sun, 3 - intermediate without sun, 4 - cloudy sky, 5 - uniform sky  # noqa: E501

        :param sky_type: The sky_type of this SkySchema.
        :type sky_type: int
        """

        self._sky_type = sky_type
