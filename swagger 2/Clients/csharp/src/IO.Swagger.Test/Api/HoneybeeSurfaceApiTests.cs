/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing HoneybeeSurfaceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class HoneybeeSurfaceApiTests
    {
        private HoneybeeSurfaceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new HoneybeeSurfaceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of HoneybeeSurfaceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' HoneybeeSurfaceApi
            //Assert.IsInstanceOfType(typeof(HoneybeeSurfaceApi), instance, "instance is a HoneybeeSurfaceApi");
        }

        
        /// <summary>
        /// Test HbsurfaceGet
        /// </summary>
        [Test]
        public void HbsurfaceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string surfaceType = null;
            //string surfaceMaterial = null;
            //string surfaceState = null;
            //var response = instance.HbsurfaceGet(surfaceType, surfaceMaterial, surfaceState);
            //Assert.IsInstanceOf<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        
        /// <summary>
        /// Test HbsurfacePost
        /// </summary>
        [Test]
        public void HbsurfacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HBSurfaceSchema hbsurface = null;
            //var response = instance.HbsurfacePost(hbsurface);
            //Assert.IsInstanceOf<InlineResponse204> (response, "response is InlineResponse204");
        }
        
        /// <summary>
        /// Test HbsurfaceUuidDelete
        /// </summary>
        [Test]
        public void HbsurfaceUuidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uuid = null;
            //instance.HbsurfaceUuidDelete(uuid);
            
        }
        
        /// <summary>
        /// Test HbsurfaceUuidGet
        /// </summary>
        [Test]
        public void HbsurfaceUuidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uuid = null;
            //var response = instance.HbsurfaceUuidGet(uuid);
            //Assert.IsInstanceOf<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        
        /// <summary>
        /// Test HbsurfaceUuidPut
        /// </summary>
        [Test]
        public void HbsurfaceUuidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uuid = null;
            //HBSurfaceSchema hbsurface = null;
            //instance.HbsurfaceUuidPut(uuid, hbsurface);
            
        }
        
    }

}
