/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SourceSchema
    /// </summary>
    [DataContract]
    public partial class SourceSchema :  IEquatable<SourceSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceSchema" /> class.
        /// </summary>
        /// <param name="SourceId">The id of a source of light.</param>
        /// <param name="Source">Source.</param>
        public SourceSchema(string SourceId = default(string), List<StateSchema> Source = default(List<StateSchema>))
        {
            this.SourceId = SourceId;
            this.Source = Source;
        }
        
        /// <summary>
        /// The id of a source of light
        /// </summary>
        /// <value>The id of a source of light</value>
        [DataMember(Name="source_id", EmitDefaultValue=false)]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public List<StateSchema> Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SourceSchema {\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceSchema);
        }

        /// <summary>
        /// Returns true if SourceSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source != null &&
                    this.Source.SequenceEqual(input.Source)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
