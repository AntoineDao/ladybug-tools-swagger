/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FivePhaselGridBasedSchema
    /// </summary>
    [DataContract]
    public partial class FivePhaselGridBasedSchema :  IEquatable<FivePhaselGridBasedSchema>, IValidatableObject
    {
        /// <summary>
        /// Defines Id
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IdEnum
        {
            
            /// <summary>
            /// Enum Phase for value: five_phase
            /// </summary>
            [EnumMember(Value = "five_phase")]
            Phase = 1
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public IdEnum? Id { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Gridbased for value: gridbased
            /// </summary>
            [EnumMember(Value = "gridbased")]
            Gridbased = 1
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets AnalysisType
        /// </summary>
        [DataMember(Name="analysis_type", EmitDefaultValue=false)]
        public AnalysisType? AnalysisType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FivePhaselGridBasedSchema" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Type">Type.</param>
        /// <param name="SkyMtx">SkyMtx.</param>
        /// <param name="AnalysisGrids">AnalysisGrids.</param>
        /// <param name="Surfaces">Surfaces.</param>
        /// <param name="AnalysisType">AnalysisType.</param>
        /// <param name="ViewMtxParameters">ViewMtxParameters.</param>
        /// <param name="DaylightMtxParameters">DaylightMtxParameters.</param>
        public FivePhaselGridBasedSchema(IdEnum? Id = default(IdEnum?), TypeEnum? Type = default(TypeEnum?), SkyMtxSchema SkyMtx = default(SkyMtxSchema), List<AnalysisGridSchema> AnalysisGrids = default(List<AnalysisGridSchema>), List<HBSurfaceSchema> Surfaces = default(List<HBSurfaceSchema>), AnalysisType? AnalysisType = default(AnalysisType?), RadianceParameters ViewMtxParameters = default(RadianceParameters), RadianceParameters DaylightMtxParameters = default(RadianceParameters))
        {
            this.Id = Id;
            this.Type = Type;
            this.SkyMtx = SkyMtx;
            this.AnalysisGrids = AnalysisGrids;
            this.Surfaces = Surfaces;
            this.AnalysisType = AnalysisType;
            this.ViewMtxParameters = ViewMtxParameters;
            this.DaylightMtxParameters = DaylightMtxParameters;
        }
        


        /// <summary>
        /// Gets or Sets SkyMtx
        /// </summary>
        [DataMember(Name="sky_mtx", EmitDefaultValue=false)]
        public SkyMtxSchema SkyMtx { get; set; }

        /// <summary>
        /// Gets or Sets AnalysisGrids
        /// </summary>
        [DataMember(Name="analysis_grids", EmitDefaultValue=false)]
        public List<AnalysisGridSchema> AnalysisGrids { get; set; }

        /// <summary>
        /// Gets or Sets Surfaces
        /// </summary>
        [DataMember(Name="surfaces", EmitDefaultValue=false)]
        public List<HBSurfaceSchema> Surfaces { get; set; }


        /// <summary>
        /// Gets or Sets ViewMtxParameters
        /// </summary>
        [DataMember(Name="view_mtx_parameters", EmitDefaultValue=false)]
        public RadianceParameters ViewMtxParameters { get; set; }

        /// <summary>
        /// Gets or Sets DaylightMtxParameters
        /// </summary>
        [DataMember(Name="daylight_mtx_parameters", EmitDefaultValue=false)]
        public RadianceParameters DaylightMtxParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FivePhaselGridBasedSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SkyMtx: ").Append(SkyMtx).Append("\n");
            sb.Append("  AnalysisGrids: ").Append(AnalysisGrids).Append("\n");
            sb.Append("  Surfaces: ").Append(Surfaces).Append("\n");
            sb.Append("  AnalysisType: ").Append(AnalysisType).Append("\n");
            sb.Append("  ViewMtxParameters: ").Append(ViewMtxParameters).Append("\n");
            sb.Append("  DaylightMtxParameters: ").Append(DaylightMtxParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FivePhaselGridBasedSchema);
        }

        /// <summary>
        /// Returns true if FivePhaselGridBasedSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of FivePhaselGridBasedSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FivePhaselGridBasedSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SkyMtx == input.SkyMtx ||
                    (this.SkyMtx != null &&
                    this.SkyMtx.Equals(input.SkyMtx))
                ) && 
                (
                    this.AnalysisGrids == input.AnalysisGrids ||
                    this.AnalysisGrids != null &&
                    this.AnalysisGrids.SequenceEqual(input.AnalysisGrids)
                ) && 
                (
                    this.Surfaces == input.Surfaces ||
                    this.Surfaces != null &&
                    this.Surfaces.SequenceEqual(input.Surfaces)
                ) && 
                (
                    this.AnalysisType == input.AnalysisType ||
                    (this.AnalysisType != null &&
                    this.AnalysisType.Equals(input.AnalysisType))
                ) && 
                (
                    this.ViewMtxParameters == input.ViewMtxParameters ||
                    (this.ViewMtxParameters != null &&
                    this.ViewMtxParameters.Equals(input.ViewMtxParameters))
                ) && 
                (
                    this.DaylightMtxParameters == input.DaylightMtxParameters ||
                    (this.DaylightMtxParameters != null &&
                    this.DaylightMtxParameters.Equals(input.DaylightMtxParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SkyMtx != null)
                    hashCode = hashCode * 59 + this.SkyMtx.GetHashCode();
                if (this.AnalysisGrids != null)
                    hashCode = hashCode * 59 + this.AnalysisGrids.GetHashCode();
                if (this.Surfaces != null)
                    hashCode = hashCode * 59 + this.Surfaces.GetHashCode();
                if (this.AnalysisType != null)
                    hashCode = hashCode * 59 + this.AnalysisType.GetHashCode();
                if (this.ViewMtxParameters != null)
                    hashCode = hashCode * 59 + this.ViewMtxParameters.GetHashCode();
                if (this.DaylightMtxParameters != null)
                    hashCode = hashCode * 59 + this.DaylightMtxParameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
