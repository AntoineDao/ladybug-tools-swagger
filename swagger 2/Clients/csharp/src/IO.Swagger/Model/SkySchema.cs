/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SkySchema
    /// </summary>
    [DataContract]
    public partial class SkySchema :  IEquatable<SkySchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SkySchema" /> class.
        /// </summary>
        /// <param name="Location">Location.</param>
        /// <param name="Hour">hour of the day - minvalue 0 and max value 23.</param>
        /// <param name="Day">day of the month - minvalue 1 and max value 31.</param>
        /// <param name="Month">month of the year - minvalue 1 and max value 12.</param>
        /// <param name="North">angle in degrees between 0-360 to indicate North.</param>
        /// <param name="SkyType">0 - Sunny with sun, 1 - sunny without sun, 2 - intermediate with sun, 3 - intermediate without sun, 4 - cloudy sky, 5 - uniform sky.</param>
        public SkySchema(EpwLocationSchema Location = default(EpwLocationSchema), int? Hour = default(int?), int? Day = default(int?), int? Month = default(int?), decimal? North = default(decimal?), int? SkyType = default(int?))
        {
            this.Location = Location;
            this.Hour = Hour;
            this.Day = Day;
            this.Month = Month;
            this.North = North;
            this.SkyType = SkyType;
        }
        
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public EpwLocationSchema Location { get; set; }

        /// <summary>
        /// hour of the day - minvalue 0 and max value 23
        /// </summary>
        /// <value>hour of the day - minvalue 0 and max value 23</value>
        [DataMember(Name="hour", EmitDefaultValue=false)]
        public int? Hour { get; set; }

        /// <summary>
        /// day of the month - minvalue 1 and max value 31
        /// </summary>
        /// <value>day of the month - minvalue 1 and max value 31</value>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public int? Day { get; set; }

        /// <summary>
        /// month of the year - minvalue 1 and max value 12
        /// </summary>
        /// <value>month of the year - minvalue 1 and max value 12</value>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public int? Month { get; set; }

        /// <summary>
        /// angle in degrees between 0-360 to indicate North
        /// </summary>
        /// <value>angle in degrees between 0-360 to indicate North</value>
        [DataMember(Name="north", EmitDefaultValue=false)]
        public decimal? North { get; set; }

        /// <summary>
        /// 0 - Sunny with sun, 1 - sunny without sun, 2 - intermediate with sun, 3 - intermediate without sun, 4 - cloudy sky, 5 - uniform sky
        /// </summary>
        /// <value>0 - Sunny with sun, 1 - sunny without sun, 2 - intermediate with sun, 3 - intermediate without sun, 4 - cloudy sky, 5 - uniform sky</value>
        [DataMember(Name="sky_type", EmitDefaultValue=false)]
        public int? SkyType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SkySchema {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  North: ").Append(North).Append("\n");
            sb.Append("  SkyType: ").Append(SkyType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SkySchema);
        }

        /// <summary>
        /// Returns true if SkySchema instances are equal
        /// </summary>
        /// <param name="input">Instance of SkySchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SkySchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Hour == input.Hour ||
                    (this.Hour != null &&
                    this.Hour.Equals(input.Hour))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this.North == input.North ||
                    (this.North != null &&
                    this.North.Equals(input.North))
                ) && 
                (
                    this.SkyType == input.SkyType ||
                    (this.SkyType != null &&
                    this.SkyType.Equals(input.SkyType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Hour != null)
                    hashCode = hashCode * 59 + this.Hour.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Month != null)
                    hashCode = hashCode * 59 + this.Month.GetHashCode();
                if (this.North != null)
                    hashCode = hashCode * 59 + this.North.GetHashCode();
                if (this.SkyType != null)
                    hashCode = hashCode * 59 + this.SkyType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
