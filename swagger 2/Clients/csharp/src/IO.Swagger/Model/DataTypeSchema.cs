/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataTypeSchema
    /// </summary>
    [DataContract]
    public partial class DataTypeSchema :  IEquatable<DataTypeSchema>, IValidatableObject
    {
        /// <summary>
        /// Defines Standard
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StandardEnum
        {
            
            /// <summary>
            /// Enum SI for value: SI
            /// </summary>
            [EnumMember(Value = "SI")]
            SI = 1,
            
            /// <summary>
            /// Enum IP for value: IP
            /// </summary>
            [EnumMember(Value = "IP")]
            IP = 2
        }

        /// <summary>
        /// Gets or Sets Standard
        /// </summary>
        [DataMember(Name="standard", EmitDefaultValue=false)]
        public StandardEnum Standard { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTypeSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataTypeSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTypeSchema" /> class.
        /// </summary>
        /// <param name="Standard">Standard (required).</param>
        /// <param name="Nickname">Nickname (required) (default to &quot;null&quot;).</param>
        public DataTypeSchema(StandardEnum Standard = default(StandardEnum), string Nickname = "null")
        {
            // to ensure "Standard" is required (not null)
            if (Standard == null)
            {
                throw new InvalidDataException("Standard is a required property for DataTypeSchema and cannot be null");
            }
            else
            {
                this.Standard = Standard;
            }
            // to ensure "Nickname" is required (not null)
            if (Nickname == null)
            {
                throw new InvalidDataException("Nickname is a required property for DataTypeSchema and cannot be null");
            }
            else
            {
                this.Nickname = Nickname;
            }
        }
        

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataTypeSchema {\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataTypeSchema);
        }

        /// <summary>
        /// Returns true if DataTypeSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of DataTypeSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataTypeSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Standard == input.Standard ||
                    (this.Standard != null &&
                    this.Standard.Equals(input.Standard))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Standard != null)
                    hashCode = hashCode * 59 + this.Standard.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
