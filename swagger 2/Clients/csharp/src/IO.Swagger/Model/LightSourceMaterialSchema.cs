/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LightSourceMaterialSchema
    /// </summary>
    [DataContract]
    public partial class LightSourceMaterialSchema :  IEquatable<LightSourceMaterialSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LightSourceMaterialSchema" /> class.
        /// </summary>
        /// <param name="Name">Name of the material.</param>
        /// <param name="Red">A positive value for the Red channel of the glow.</param>
        /// <param name="Green">A positive value for the Green channel of the glow.</param>
        /// <param name="Blue">A positive value for the Blue channel of the glow.</param>
        /// <param name="Radius">Maximum radius for shadow testing.</param>
        /// <param name="Modifier">Modifier (default to &quot;void&quot;).</param>
        public LightSourceMaterialSchema(string Name = default(string), decimal? Red = default(decimal?), decimal? Green = default(decimal?), decimal? Blue = default(decimal?), decimal? Radius = default(decimal?), string Modifier = "void")
        {
            this.Name = Name;
            this.Red = Red;
            this.Green = Green;
            this.Blue = Blue;
            this.Radius = Radius;
            // use default value if no "Modifier" provided
            if (Modifier == null)
            {
                this.Modifier = "void";
            }
            else
            {
                this.Modifier = Modifier;
            }
        }
        
        /// <summary>
        /// Name of the material
        /// </summary>
        /// <value>Name of the material</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A positive value for the Red channel of the glow
        /// </summary>
        /// <value>A positive value for the Red channel of the glow</value>
        [DataMember(Name="red", EmitDefaultValue=false)]
        public decimal? Red { get; set; }

        /// <summary>
        /// A positive value for the Green channel of the glow
        /// </summary>
        /// <value>A positive value for the Green channel of the glow</value>
        [DataMember(Name="green", EmitDefaultValue=false)]
        public decimal? Green { get; set; }

        /// <summary>
        /// A positive value for the Blue channel of the glow
        /// </summary>
        /// <value>A positive value for the Blue channel of the glow</value>
        [DataMember(Name="blue", EmitDefaultValue=false)]
        public decimal? Blue { get; set; }

        /// <summary>
        /// Maximum radius for shadow testing
        /// </summary>
        /// <value>Maximum radius for shadow testing</value>
        [DataMember(Name="radius", EmitDefaultValue=false)]
        public decimal? Radius { get; set; }

        /// <summary>
        /// Gets or Sets Modifier
        /// </summary>
        [DataMember(Name="modifier", EmitDefaultValue=false)]
        public string Modifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LightSourceMaterialSchema {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Red: ").Append(Red).Append("\n");
            sb.Append("  Green: ").Append(Green).Append("\n");
            sb.Append("  Blue: ").Append(Blue).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  Modifier: ").Append(Modifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LightSourceMaterialSchema);
        }

        /// <summary>
        /// Returns true if LightSourceMaterialSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of LightSourceMaterialSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LightSourceMaterialSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Red == input.Red ||
                    (this.Red != null &&
                    this.Red.Equals(input.Red))
                ) && 
                (
                    this.Green == input.Green ||
                    (this.Green != null &&
                    this.Green.Equals(input.Green))
                ) && 
                (
                    this.Blue == input.Blue ||
                    (this.Blue != null &&
                    this.Blue.Equals(input.Blue))
                ) && 
                (
                    this.Radius == input.Radius ||
                    (this.Radius != null &&
                    this.Radius.Equals(input.Radius))
                ) && 
                (
                    this.Modifier == input.Modifier ||
                    (this.Modifier != null &&
                    this.Modifier.Equals(input.Modifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Red != null)
                    hashCode = hashCode * 59 + this.Red.GetHashCode();
                if (this.Green != null)
                    hashCode = hashCode * 59 + this.Green.GetHashCode();
                if (this.Blue != null)
                    hashCode = hashCode * 59 + this.Blue.GetHashCode();
                if (this.Radius != null)
                    hashCode = hashCode * 59 + this.Radius.GetHashCode();
                if (this.Modifier != null)
                    hashCode = hashCode * 59 + this.Modifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Red (decimal?) maximum
            if(this.Red > (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Red, must be a value less than or equal to 1.", new [] { "Red" });
            }

            // Red (decimal?) minimum
            if(this.Red < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Red, must be a value greater than or equal to 0.", new [] { "Red" });
            }

            // Green (decimal?) maximum
            if(this.Green > (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Green, must be a value less than or equal to 1.", new [] { "Green" });
            }

            // Green (decimal?) minimum
            if(this.Green < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Green, must be a value greater than or equal to 0.", new [] { "Green" });
            }

            // Blue (decimal?) maximum
            if(this.Blue > (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Blue, must be a value less than or equal to 1.", new [] { "Blue" });
            }

            // Blue (decimal?) minimum
            if(this.Blue < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Blue, must be a value greater than or equal to 0.", new [] { "Blue" });
            }

            yield break;
        }
    }

}
