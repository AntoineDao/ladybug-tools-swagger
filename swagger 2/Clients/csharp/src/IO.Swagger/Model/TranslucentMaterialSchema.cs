/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TranslucentMaterialSchema
    /// </summary>
    [DataContract]
    public partial class TranslucentMaterialSchema :  IEquatable<TranslucentMaterialSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslucentMaterialSchema" /> class.
        /// </summary>
        /// <param name="Name">Name of the material.</param>
        /// <param name="RTransmittance">Transmittance for red.</param>
        /// <param name="GTransmittance">Transmittance for green.</param>
        /// <param name="BTransmittance">Transmittance for blue.</param>
        /// <param name="Refraction">Index of refraction.</param>
        /// <param name="Modifier">Modifier (default to &quot;void&quot;).</param>
        public TranslucentMaterialSchema(string Name = default(string), decimal? RTransmittance = default(decimal?), decimal? GTransmittance = default(decimal?), decimal? BTransmittance = default(decimal?), decimal? Refraction = default(decimal?), string Modifier = "void")
        {
            this.Name = Name;
            this.RTransmittance = RTransmittance;
            this.GTransmittance = GTransmittance;
            this.BTransmittance = BTransmittance;
            this.Refraction = Refraction;
            // use default value if no "Modifier" provided
            if (Modifier == null)
            {
                this.Modifier = "void";
            }
            else
            {
                this.Modifier = Modifier;
            }
        }
        
        /// <summary>
        /// Name of the material
        /// </summary>
        /// <value>Name of the material</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Transmittance for red
        /// </summary>
        /// <value>Transmittance for red</value>
        [DataMember(Name="r_transmittance", EmitDefaultValue=false)]
        public decimal? RTransmittance { get; set; }

        /// <summary>
        /// Transmittance for green
        /// </summary>
        /// <value>Transmittance for green</value>
        [DataMember(Name="g_transmittance", EmitDefaultValue=false)]
        public decimal? GTransmittance { get; set; }

        /// <summary>
        /// Transmittance for blue
        /// </summary>
        /// <value>Transmittance for blue</value>
        [DataMember(Name="b_transmittance", EmitDefaultValue=false)]
        public decimal? BTransmittance { get; set; }

        /// <summary>
        /// Index of refraction
        /// </summary>
        /// <value>Index of refraction</value>
        [DataMember(Name="refraction", EmitDefaultValue=false)]
        public decimal? Refraction { get; set; }

        /// <summary>
        /// Gets or Sets Modifier
        /// </summary>
        [DataMember(Name="modifier", EmitDefaultValue=false)]
        public string Modifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranslucentMaterialSchema {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RTransmittance: ").Append(RTransmittance).Append("\n");
            sb.Append("  GTransmittance: ").Append(GTransmittance).Append("\n");
            sb.Append("  BTransmittance: ").Append(BTransmittance).Append("\n");
            sb.Append("  Refraction: ").Append(Refraction).Append("\n");
            sb.Append("  Modifier: ").Append(Modifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranslucentMaterialSchema);
        }

        /// <summary>
        /// Returns true if TranslucentMaterialSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of TranslucentMaterialSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranslucentMaterialSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RTransmittance == input.RTransmittance ||
                    (this.RTransmittance != null &&
                    this.RTransmittance.Equals(input.RTransmittance))
                ) && 
                (
                    this.GTransmittance == input.GTransmittance ||
                    (this.GTransmittance != null &&
                    this.GTransmittance.Equals(input.GTransmittance))
                ) && 
                (
                    this.BTransmittance == input.BTransmittance ||
                    (this.BTransmittance != null &&
                    this.BTransmittance.Equals(input.BTransmittance))
                ) && 
                (
                    this.Refraction == input.Refraction ||
                    (this.Refraction != null &&
                    this.Refraction.Equals(input.Refraction))
                ) && 
                (
                    this.Modifier == input.Modifier ||
                    (this.Modifier != null &&
                    this.Modifier.Equals(input.Modifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RTransmittance != null)
                    hashCode = hashCode * 59 + this.RTransmittance.GetHashCode();
                if (this.GTransmittance != null)
                    hashCode = hashCode * 59 + this.GTransmittance.GetHashCode();
                if (this.BTransmittance != null)
                    hashCode = hashCode * 59 + this.BTransmittance.GetHashCode();
                if (this.Refraction != null)
                    hashCode = hashCode * 59 + this.Refraction.GetHashCode();
                if (this.Modifier != null)
                    hashCode = hashCode * 59 + this.Modifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RTransmittance (decimal?) maximum
            if(this.RTransmittance > (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RTransmittance, must be a value less than or equal to 1.", new [] { "RTransmittance" });
            }

            // RTransmittance (decimal?) minimum
            if(this.RTransmittance < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RTransmittance, must be a value greater than or equal to 0.", new [] { "RTransmittance" });
            }

            // GTransmittance (decimal?) maximum
            if(this.GTransmittance > (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GTransmittance, must be a value less than or equal to 1.", new [] { "GTransmittance" });
            }

            // GTransmittance (decimal?) minimum
            if(this.GTransmittance < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GTransmittance, must be a value greater than or equal to 0.", new [] { "GTransmittance" });
            }

            // BTransmittance (decimal?) maximum
            if(this.BTransmittance > (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BTransmittance, must be a value less than or equal to 1.", new [] { "BTransmittance" });
            }

            // BTransmittance (decimal?) minimum
            if(this.BTransmittance < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BTransmittance, must be a value greater than or equal to 0.", new [] { "BTransmittance" });
            }

            // Refraction (decimal?) maximum
            if(this.Refraction > (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Refraction, must be a value less than or equal to 1.", new [] { "Refraction" });
            }

            // Refraction (decimal?) minimum
            if(this.Refraction < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Refraction, must be a value greater than or equal to 0.", new [] { "Refraction" });
            }

            yield break;
        }
    }

}
