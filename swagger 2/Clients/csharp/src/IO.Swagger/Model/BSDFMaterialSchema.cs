/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BSDFMaterialSchema
    /// </summary>
    [DataContract]
    public partial class BSDFMaterialSchema :  IEquatable<BSDFMaterialSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BSDFMaterialSchema" /> class.
        /// </summary>
        /// <param name="Name">Name of the material.</param>
        /// <param name="XmlData">A string of the original XML.</param>
        /// <param name="UpOrientation">UpOrientation.</param>
        /// <param name="Thickness">Thickness.</param>
        /// <param name="Modifier">Modifier (default to &quot;void&quot;).</param>
        public BSDFMaterialSchema(string Name = default(string), string XmlData = default(string), decimal? UpOrientation = default(decimal?), decimal? Thickness = default(decimal?), string Modifier = "void")
        {
            this.Name = Name;
            this.XmlData = XmlData;
            this.UpOrientation = UpOrientation;
            this.Thickness = Thickness;
            // use default value if no "Modifier" provided
            if (Modifier == null)
            {
                this.Modifier = "void";
            }
            else
            {
                this.Modifier = Modifier;
            }
        }
        
        /// <summary>
        /// Name of the material
        /// </summary>
        /// <value>Name of the material</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A string of the original XML
        /// </summary>
        /// <value>A string of the original XML</value>
        [DataMember(Name="xml_data", EmitDefaultValue=false)]
        public string XmlData { get; set; }

        /// <summary>
        /// Gets or Sets UpOrientation
        /// </summary>
        [DataMember(Name="up_orientation", EmitDefaultValue=false)]
        public decimal? UpOrientation { get; set; }

        /// <summary>
        /// Gets or Sets Thickness
        /// </summary>
        [DataMember(Name="thickness", EmitDefaultValue=false)]
        public decimal? Thickness { get; set; }

        /// <summary>
        /// Gets or Sets Modifier
        /// </summary>
        [DataMember(Name="modifier", EmitDefaultValue=false)]
        public string Modifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BSDFMaterialSchema {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  XmlData: ").Append(XmlData).Append("\n");
            sb.Append("  UpOrientation: ").Append(UpOrientation).Append("\n");
            sb.Append("  Thickness: ").Append(Thickness).Append("\n");
            sb.Append("  Modifier: ").Append(Modifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BSDFMaterialSchema);
        }

        /// <summary>
        /// Returns true if BSDFMaterialSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of BSDFMaterialSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BSDFMaterialSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.XmlData == input.XmlData ||
                    (this.XmlData != null &&
                    this.XmlData.Equals(input.XmlData))
                ) && 
                (
                    this.UpOrientation == input.UpOrientation ||
                    (this.UpOrientation != null &&
                    this.UpOrientation.Equals(input.UpOrientation))
                ) && 
                (
                    this.Thickness == input.Thickness ||
                    (this.Thickness != null &&
                    this.Thickness.Equals(input.Thickness))
                ) && 
                (
                    this.Modifier == input.Modifier ||
                    (this.Modifier != null &&
                    this.Modifier.Equals(input.Modifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.XmlData != null)
                    hashCode = hashCode * 59 + this.XmlData.GetHashCode();
                if (this.UpOrientation != null)
                    hashCode = hashCode * 59 + this.UpOrientation.GetHashCode();
                if (this.Thickness != null)
                    hashCode = hashCode * 59 + this.Thickness.GetHashCode();
                if (this.Modifier != null)
                    hashCode = hashCode * 59 + this.Modifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
