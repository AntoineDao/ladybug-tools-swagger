/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SkyMtxSchema
    /// </summary>
    [DataContract]
    public partial class SkyMtxSchema :  IEquatable<SkyMtxSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SkyMtxSchema" /> class.
        /// </summary>
        /// <param name="Wea">Wea.</param>
        /// <param name="SkyDensity">1 - Tregenza Sky, 2 - Reinhart Sky, etc. (Default - 1).</param>
        /// <param name="North">angle in degrees between 0-360 to indicate North.</param>
        /// <param name="Hoys">Hoys.</param>
        /// <param name="Mode">sky mode.</param>
        /// <param name="Suffix">Suffix for the sky matrix.</param>
        public SkyMtxSchema(WeaSchema Wea = default(WeaSchema), int? SkyDensity = default(int?), decimal? North = default(decimal?), HoysSchema Hoys = default(HoysSchema), int? Mode = default(int?), string Suffix = default(string))
        {
            this.Wea = Wea;
            this.SkyDensity = SkyDensity;
            this.North = North;
            this.Hoys = Hoys;
            this.Mode = Mode;
            this.Suffix = Suffix;
        }
        
        /// <summary>
        /// Gets or Sets Wea
        /// </summary>
        [DataMember(Name="wea", EmitDefaultValue=false)]
        public WeaSchema Wea { get; set; }

        /// <summary>
        /// 1 - Tregenza Sky, 2 - Reinhart Sky, etc. (Default - 1)
        /// </summary>
        /// <value>1 - Tregenza Sky, 2 - Reinhart Sky, etc. (Default - 1)</value>
        [DataMember(Name="sky_density", EmitDefaultValue=false)]
        public int? SkyDensity { get; set; }

        /// <summary>
        /// angle in degrees between 0-360 to indicate North
        /// </summary>
        /// <value>angle in degrees between 0-360 to indicate North</value>
        [DataMember(Name="north", EmitDefaultValue=false)]
        public decimal? North { get; set; }

        /// <summary>
        /// Gets or Sets Hoys
        /// </summary>
        [DataMember(Name="hoys", EmitDefaultValue=false)]
        public HoysSchema Hoys { get; set; }

        /// <summary>
        /// sky mode
        /// </summary>
        /// <value>sky mode</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public int? Mode { get; set; }

        /// <summary>
        /// Suffix for the sky matrix
        /// </summary>
        /// <value>Suffix for the sky matrix</value>
        [DataMember(Name="suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SkyMtxSchema {\n");
            sb.Append("  Wea: ").Append(Wea).Append("\n");
            sb.Append("  SkyDensity: ").Append(SkyDensity).Append("\n");
            sb.Append("  North: ").Append(North).Append("\n");
            sb.Append("  Hoys: ").Append(Hoys).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SkyMtxSchema);
        }

        /// <summary>
        /// Returns true if SkyMtxSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of SkyMtxSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SkyMtxSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Wea == input.Wea ||
                    (this.Wea != null &&
                    this.Wea.Equals(input.Wea))
                ) && 
                (
                    this.SkyDensity == input.SkyDensity ||
                    (this.SkyDensity != null &&
                    this.SkyDensity.Equals(input.SkyDensity))
                ) && 
                (
                    this.North == input.North ||
                    (this.North != null &&
                    this.North.Equals(input.North))
                ) && 
                (
                    this.Hoys == input.Hoys ||
                    (this.Hoys != null &&
                    this.Hoys.Equals(input.Hoys))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Wea != null)
                    hashCode = hashCode * 59 + this.Wea.GetHashCode();
                if (this.SkyDensity != null)
                    hashCode = hashCode * 59 + this.SkyDensity.GetHashCode();
                if (this.North != null)
                    hashCode = hashCode * 59 + this.North.GetHashCode();
                if (this.Hoys != null)
                    hashCode = hashCode * 59 + this.Hoys.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Suffix != null)
                    hashCode = hashCode * 59 + this.Suffix.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // North (decimal?) maximum
            if(this.North > (decimal?)360)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for North, must be a value less than or equal to 360.", new [] { "North" });
            }

            // North (decimal?) minimum
            if(this.North < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for North, must be a value greater than or equal to 0.", new [] { "North" });
            }

            yield break;
        }
    }

}
