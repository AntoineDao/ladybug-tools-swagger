/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalysisGridApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of analysis_grid objects
        /// </summary>
        /// <remarks>
        /// Retrieves a list of analysis grids for a given filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridName">The name of the grid (optional)</param>
        /// <param name="minPoints">The minimum amount of points the analysis grid has (optional)</param>
        /// <param name="maxPoints">The maximum amount of points the analysis grid has (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 AnalysisGridGet (string gridName = null, int? minPoints = null, int? maxPoints = null);

        /// <summary>
        /// Get a list of analysis_grid objects
        /// </summary>
        /// <remarks>
        /// Retrieves a list of analysis grids for a given filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridName">The name of the grid (optional)</param>
        /// <param name="minPoints">The minimum amount of points the analysis grid has (optional)</param>
        /// <param name="maxPoints">The maximum amount of points the analysis grid has (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> AnalysisGridGetWithHttpInfo (string gridName = null, int? minPoints = null, int? maxPoints = null);
        /// <summary>
        /// Create a new analysis_grid file
        /// </summary>
        /// <remarks>
        /// Adds a new analysis_grid file to the list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>InlineResponse204</returns>
        InlineResponse204 AnalysisGridPost (AnalysisGridSchema analysisGrid);

        /// <summary>
        /// Create a new analysis_grid file
        /// </summary>
        /// <remarks>
        /// Adds a new analysis_grid file to the list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>ApiResponse of InlineResponse204</returns>
        ApiResponse<InlineResponse204> AnalysisGridPostWithHttpInfo (AnalysisGridSchema analysisGrid);
        /// <summary>
        /// Delete an existing analysis_grid file
        /// </summary>
        /// <remarks>
        /// Delete an analysis_grid file in the database specifying the uuid of the file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns></returns>
        void AnalysisGridUuidDelete (string uuid);

        /// <summary>
        /// Delete an existing analysis_grid file
        /// </summary>
        /// <remarks>
        /// Delete an analysis_grid file in the database specifying the uuid of the file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnalysisGridUuidDeleteWithHttpInfo (string uuid);
        /// <summary>
        /// Get an analysis_grid object
        /// </summary>
        /// <remarks>
        /// Returns a single analysis_grid object based on the provided uuid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 AnalysisGridUuidGet (string uuid);

        /// <summary>
        /// Get an analysis_grid object
        /// </summary>
        /// <remarks>
        /// Returns a single analysis_grid object based on the provided uuid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> AnalysisGridUuidGetWithHttpInfo (string uuid);
        /// <summary>
        /// Modify an existing analysis_grid file
        /// </summary>
        /// <remarks>
        /// Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns></returns>
        void AnalysisGridUuidPut (string uuid, AnalysisGridSchema analysisGrid);

        /// <summary>
        /// Modify an existing analysis_grid file
        /// </summary>
        /// <remarks>
        /// Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnalysisGridUuidPutWithHttpInfo (string uuid, AnalysisGridSchema analysisGrid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of analysis_grid objects
        /// </summary>
        /// <remarks>
        /// Retrieves a list of analysis grids for a given filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridName">The name of the grid (optional)</param>
        /// <param name="minPoints">The minimum amount of points the analysis grid has (optional)</param>
        /// <param name="maxPoints">The maximum amount of points the analysis grid has (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> AnalysisGridGetAsync (string gridName = null, int? minPoints = null, int? maxPoints = null);

        /// <summary>
        /// Get a list of analysis_grid objects
        /// </summary>
        /// <remarks>
        /// Retrieves a list of analysis grids for a given filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridName">The name of the grid (optional)</param>
        /// <param name="minPoints">The minimum amount of points the analysis grid has (optional)</param>
        /// <param name="maxPoints">The maximum amount of points the analysis grid has (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> AnalysisGridGetAsyncWithHttpInfo (string gridName = null, int? minPoints = null, int? maxPoints = null);
        /// <summary>
        /// Create a new analysis_grid file
        /// </summary>
        /// <remarks>
        /// Adds a new analysis_grid file to the list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>Task of InlineResponse204</returns>
        System.Threading.Tasks.Task<InlineResponse204> AnalysisGridPostAsync (AnalysisGridSchema analysisGrid);

        /// <summary>
        /// Create a new analysis_grid file
        /// </summary>
        /// <remarks>
        /// Adds a new analysis_grid file to the list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>Task of ApiResponse (InlineResponse204)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse204>> AnalysisGridPostAsyncWithHttpInfo (AnalysisGridSchema analysisGrid);
        /// <summary>
        /// Delete an existing analysis_grid file
        /// </summary>
        /// <remarks>
        /// Delete an analysis_grid file in the database specifying the uuid of the file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnalysisGridUuidDeleteAsync (string uuid);

        /// <summary>
        /// Delete an existing analysis_grid file
        /// </summary>
        /// <remarks>
        /// Delete an analysis_grid file in the database specifying the uuid of the file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalysisGridUuidDeleteAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Get an analysis_grid object
        /// </summary>
        /// <remarks>
        /// Returns a single analysis_grid object based on the provided uuid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> AnalysisGridUuidGetAsync (string uuid);

        /// <summary>
        /// Get an analysis_grid object
        /// </summary>
        /// <remarks>
        /// Returns a single analysis_grid object based on the provided uuid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> AnalysisGridUuidGetAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Modify an existing analysis_grid file
        /// </summary>
        /// <remarks>
        /// Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnalysisGridUuidPutAsync (string uuid, AnalysisGridSchema analysisGrid);

        /// <summary>
        /// Modify an existing analysis_grid file
        /// </summary>
        /// <remarks>
        /// Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalysisGridUuidPutAsyncWithHttpInfo (string uuid, AnalysisGridSchema analysisGrid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnalysisGridApi : IAnalysisGridApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisGridApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalysisGridApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisGridApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalysisGridApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of analysis_grid objects Retrieves a list of analysis grids for a given filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridName">The name of the grid (optional)</param>
        /// <param name="minPoints">The minimum amount of points the analysis grid has (optional)</param>
        /// <param name="maxPoints">The maximum amount of points the analysis grid has (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 AnalysisGridGet (string gridName = null, int? minPoints = null, int? maxPoints = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = AnalysisGridGetWithHttpInfo(gridName, minPoints, maxPoints);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of analysis_grid objects Retrieves a list of analysis grids for a given filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridName">The name of the grid (optional)</param>
        /// <param name="minPoints">The minimum amount of points the analysis grid has (optional)</param>
        /// <param name="maxPoints">The maximum amount of points the analysis grid has (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > AnalysisGridGetWithHttpInfo (string gridName = null, int? minPoints = null, int? maxPoints = null)
        {

            var localVarPath = "/analysis_grid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "grid_name", gridName)); // query parameter
            if (minPoints != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "min_points", minPoints)); // query parameter
            if (maxPoints != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "max_points", maxPoints)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get a list of analysis_grid objects Retrieves a list of analysis grids for a given filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridName">The name of the grid (optional)</param>
        /// <param name="minPoints">The minimum amount of points the analysis grid has (optional)</param>
        /// <param name="maxPoints">The maximum amount of points the analysis grid has (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> AnalysisGridGetAsync (string gridName = null, int? minPoints = null, int? maxPoints = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await AnalysisGridGetAsyncWithHttpInfo(gridName, minPoints, maxPoints);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of analysis_grid objects Retrieves a list of analysis grids for a given filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridName">The name of the grid (optional)</param>
        /// <param name="minPoints">The minimum amount of points the analysis grid has (optional)</param>
        /// <param name="maxPoints">The maximum amount of points the analysis grid has (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> AnalysisGridGetAsyncWithHttpInfo (string gridName = null, int? minPoints = null, int? maxPoints = null)
        {

            var localVarPath = "/analysis_grid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "grid_name", gridName)); // query parameter
            if (minPoints != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "min_points", minPoints)); // query parameter
            if (maxPoints != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "max_points", maxPoints)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Create a new analysis_grid file Adds a new analysis_grid file to the list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>InlineResponse204</returns>
        public InlineResponse204 AnalysisGridPost (AnalysisGridSchema analysisGrid)
        {
             ApiResponse<InlineResponse204> localVarResponse = AnalysisGridPostWithHttpInfo(analysisGrid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new analysis_grid file Adds a new analysis_grid file to the list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>ApiResponse of InlineResponse204</returns>
        public ApiResponse< InlineResponse204 > AnalysisGridPostWithHttpInfo (AnalysisGridSchema analysisGrid)
        {
            // verify the required parameter 'analysisGrid' is set
            if (analysisGrid == null)
                throw new ApiException(400, "Missing required parameter 'analysisGrid' when calling AnalysisGridApi->AnalysisGridPost");

            var localVarPath = "/analysis_grid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (analysisGrid != null && analysisGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(analysisGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analysisGrid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse204>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse204) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse204)));
        }

        /// <summary>
        /// Create a new analysis_grid file Adds a new analysis_grid file to the list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>Task of InlineResponse204</returns>
        public async System.Threading.Tasks.Task<InlineResponse204> AnalysisGridPostAsync (AnalysisGridSchema analysisGrid)
        {
             ApiResponse<InlineResponse204> localVarResponse = await AnalysisGridPostAsyncWithHttpInfo(analysisGrid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new analysis_grid file Adds a new analysis_grid file to the list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>Task of ApiResponse (InlineResponse204)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse204>> AnalysisGridPostAsyncWithHttpInfo (AnalysisGridSchema analysisGrid)
        {
            // verify the required parameter 'analysisGrid' is set
            if (analysisGrid == null)
                throw new ApiException(400, "Missing required parameter 'analysisGrid' when calling AnalysisGridApi->AnalysisGridPost");

            var localVarPath = "/analysis_grid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (analysisGrid != null && analysisGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(analysisGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analysisGrid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse204>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse204) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse204)));
        }

        /// <summary>
        /// Delete an existing analysis_grid file Delete an analysis_grid file in the database specifying the uuid of the file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns></returns>
        public void AnalysisGridUuidDelete (string uuid)
        {
             AnalysisGridUuidDeleteWithHttpInfo(uuid);
        }

        /// <summary>
        /// Delete an existing analysis_grid file Delete an analysis_grid file in the database specifying the uuid of the file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnalysisGridUuidDeleteWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AnalysisGridApi->AnalysisGridUuidDelete");

            var localVarPath = "/analysis_grid/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridUuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an existing analysis_grid file Delete an analysis_grid file in the database specifying the uuid of the file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnalysisGridUuidDeleteAsync (string uuid)
        {
             await AnalysisGridUuidDeleteAsyncWithHttpInfo(uuid);

        }

        /// <summary>
        /// Delete an existing analysis_grid file Delete an analysis_grid file in the database specifying the uuid of the file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalysisGridUuidDeleteAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AnalysisGridApi->AnalysisGridUuidDelete");

            var localVarPath = "/analysis_grid/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridUuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get an analysis_grid object Returns a single analysis_grid object based on the provided uuid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 AnalysisGridUuidGet (string uuid)
        {
             ApiResponse<InlineResponse2001> localVarResponse = AnalysisGridUuidGetWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an analysis_grid object Returns a single analysis_grid object based on the provided uuid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > AnalysisGridUuidGetWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AnalysisGridApi->AnalysisGridUuidGet");

            var localVarPath = "/analysis_grid/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridUuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get an analysis_grid object Returns a single analysis_grid object based on the provided uuid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> AnalysisGridUuidGetAsync (string uuid)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await AnalysisGridUuidGetAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an analysis_grid object Returns a single analysis_grid object based on the provided uuid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> AnalysisGridUuidGetAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AnalysisGridApi->AnalysisGridUuidGet");

            var localVarPath = "/analysis_grid/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridUuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Modify an existing analysis_grid file Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns></returns>
        public void AnalysisGridUuidPut (string uuid, AnalysisGridSchema analysisGrid)
        {
             AnalysisGridUuidPutWithHttpInfo(uuid, analysisGrid);
        }

        /// <summary>
        /// Modify an existing analysis_grid file Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnalysisGridUuidPutWithHttpInfo (string uuid, AnalysisGridSchema analysisGrid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AnalysisGridApi->AnalysisGridUuidPut");
            // verify the required parameter 'analysisGrid' is set
            if (analysisGrid == null)
                throw new ApiException(400, "Missing required parameter 'analysisGrid' when calling AnalysisGridApi->AnalysisGridUuidPut");

            var localVarPath = "/analysis_grid/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (analysisGrid != null && analysisGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(analysisGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analysisGrid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridUuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Modify an existing analysis_grid file Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnalysisGridUuidPutAsync (string uuid, AnalysisGridSchema analysisGrid)
        {
             await AnalysisGridUuidPutAsyncWithHttpInfo(uuid, analysisGrid);

        }

        /// <summary>
        /// Modify an existing analysis_grid file Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the analysis_grid.</param>
        /// <param name="analysisGrid">A analysis_grid JSON filer with a uuid key.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalysisGridUuidPutAsyncWithHttpInfo (string uuid, AnalysisGridSchema analysisGrid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling AnalysisGridApi->AnalysisGridUuidPut");
            // verify the required parameter 'analysisGrid' is set
            if (analysisGrid == null)
                throw new ApiException(400, "Missing required parameter 'analysisGrid' when calling AnalysisGridApi->AnalysisGridUuidPut");

            var localVarPath = "/analysis_grid/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (analysisGrid != null && analysisGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(analysisGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analysisGrid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalysisGridUuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
