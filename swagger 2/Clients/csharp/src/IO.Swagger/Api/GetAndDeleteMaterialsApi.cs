/* 
 * Honeybee Server API
 *
 * A sample API definition for a honeybee server
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetAndDeleteMaterialsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of material objects
        /// </summary>
        /// <remarks>
        /// Retrieves a list of material uuids for a given filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialType">The type of the material to be queried (optional)</param>
        /// <param name="rgbTransmittance">The RGB average transmittance value (will only return translucent material) (optional)</param>
        /// <param name="rgbReflectance">The RGB average reflectance value (will only return opaque material) (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 MaterialGet (string materialType = null, decimal? rgbTransmittance = null, decimal? rgbReflectance = null);

        /// <summary>
        /// Get a list of material objects
        /// </summary>
        /// <remarks>
        /// Retrieves a list of material uuids for a given filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialType">The type of the material to be queried (optional)</param>
        /// <param name="rgbTransmittance">The RGB average transmittance value (will only return translucent material) (optional)</param>
        /// <param name="rgbReflectance">The RGB average reflectance value (will only return opaque material) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> MaterialGetWithHttpInfo (string materialType = null, decimal? rgbTransmittance = null, decimal? rgbReflectance = null);
        /// <summary>
        /// Delete an existing material file
        /// </summary>
        /// <remarks>
        /// Delete an material file in the database specifying the uuid of the file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns></returns>
        void MaterialUuidDelete (string uuid);

        /// <summary>
        /// Delete an existing material file
        /// </summary>
        /// <remarks>
        /// Delete an material file in the database specifying the uuid of the file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MaterialUuidDeleteWithHttpInfo (string uuid);
        /// <summary>
        /// Get a specific material object
        /// </summary>
        /// <remarks>
        /// Returns a single material object
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 MaterialUuidGet (string uuid);

        /// <summary>
        /// Get a specific material object
        /// </summary>
        /// <remarks>
        /// Returns a single material object
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> MaterialUuidGetWithHttpInfo (string uuid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of material objects
        /// </summary>
        /// <remarks>
        /// Retrieves a list of material uuids for a given filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialType">The type of the material to be queried (optional)</param>
        /// <param name="rgbTransmittance">The RGB average transmittance value (will only return translucent material) (optional)</param>
        /// <param name="rgbReflectance">The RGB average reflectance value (will only return opaque material) (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> MaterialGetAsync (string materialType = null, decimal? rgbTransmittance = null, decimal? rgbReflectance = null);

        /// <summary>
        /// Get a list of material objects
        /// </summary>
        /// <remarks>
        /// Retrieves a list of material uuids for a given filter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialType">The type of the material to be queried (optional)</param>
        /// <param name="rgbTransmittance">The RGB average transmittance value (will only return translucent material) (optional)</param>
        /// <param name="rgbReflectance">The RGB average reflectance value (will only return opaque material) (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> MaterialGetAsyncWithHttpInfo (string materialType = null, decimal? rgbTransmittance = null, decimal? rgbReflectance = null);
        /// <summary>
        /// Delete an existing material file
        /// </summary>
        /// <remarks>
        /// Delete an material file in the database specifying the uuid of the file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MaterialUuidDeleteAsync (string uuid);

        /// <summary>
        /// Delete an existing material file
        /// </summary>
        /// <remarks>
        /// Delete an material file in the database specifying the uuid of the file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MaterialUuidDeleteAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Get a specific material object
        /// </summary>
        /// <remarks>
        /// Returns a single material object
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> MaterialUuidGetAsync (string uuid);

        /// <summary>
        /// Get a specific material object
        /// </summary>
        /// <remarks>
        /// Returns a single material object
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> MaterialUuidGetAsyncWithHttpInfo (string uuid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetAndDeleteMaterialsApi : IGetAndDeleteMaterialsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAndDeleteMaterialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GetAndDeleteMaterialsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAndDeleteMaterialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GetAndDeleteMaterialsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of material objects Retrieves a list of material uuids for a given filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialType">The type of the material to be queried (optional)</param>
        /// <param name="rgbTransmittance">The RGB average transmittance value (will only return translucent material) (optional)</param>
        /// <param name="rgbReflectance">The RGB average reflectance value (will only return opaque material) (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 MaterialGet (string materialType = null, decimal? rgbTransmittance = null, decimal? rgbReflectance = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = MaterialGetWithHttpInfo(materialType, rgbTransmittance, rgbReflectance);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of material objects Retrieves a list of material uuids for a given filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialType">The type of the material to be queried (optional)</param>
        /// <param name="rgbTransmittance">The RGB average transmittance value (will only return translucent material) (optional)</param>
        /// <param name="rgbReflectance">The RGB average reflectance value (will only return opaque material) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > MaterialGetWithHttpInfo (string materialType = null, decimal? rgbTransmittance = null, decimal? rgbReflectance = null)
        {

            var localVarPath = "/material";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (materialType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "material_type", materialType)); // query parameter
            if (rgbTransmittance != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "rgb_transmittance", rgbTransmittance)); // query parameter
            if (rgbReflectance != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "rgb_reflectance", rgbReflectance)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MaterialGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Get a list of material objects Retrieves a list of material uuids for a given filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialType">The type of the material to be queried (optional)</param>
        /// <param name="rgbTransmittance">The RGB average transmittance value (will only return translucent material) (optional)</param>
        /// <param name="rgbReflectance">The RGB average reflectance value (will only return opaque material) (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> MaterialGetAsync (string materialType = null, decimal? rgbTransmittance = null, decimal? rgbReflectance = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await MaterialGetAsyncWithHttpInfo(materialType, rgbTransmittance, rgbReflectance);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of material objects Retrieves a list of material uuids for a given filter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materialType">The type of the material to be queried (optional)</param>
        /// <param name="rgbTransmittance">The RGB average transmittance value (will only return translucent material) (optional)</param>
        /// <param name="rgbReflectance">The RGB average reflectance value (will only return opaque material) (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> MaterialGetAsyncWithHttpInfo (string materialType = null, decimal? rgbTransmittance = null, decimal? rgbReflectance = null)
        {

            var localVarPath = "/material";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (materialType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "material_type", materialType)); // query parameter
            if (rgbTransmittance != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "rgb_transmittance", rgbTransmittance)); // query parameter
            if (rgbReflectance != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "rgb_reflectance", rgbReflectance)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MaterialGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Delete an existing material file Delete an material file in the database specifying the uuid of the file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns></returns>
        public void MaterialUuidDelete (string uuid)
        {
             MaterialUuidDeleteWithHttpInfo(uuid);
        }

        /// <summary>
        /// Delete an existing material file Delete an material file in the database specifying the uuid of the file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MaterialUuidDeleteWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling GetAndDeleteMaterialsApi->MaterialUuidDelete");

            var localVarPath = "/material/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MaterialUuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an existing material file Delete an material file in the database specifying the uuid of the file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MaterialUuidDeleteAsync (string uuid)
        {
             await MaterialUuidDeleteAsyncWithHttpInfo(uuid);

        }

        /// <summary>
        /// Delete an existing material file Delete an material file in the database specifying the uuid of the file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MaterialUuidDeleteAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling GetAndDeleteMaterialsApi->MaterialUuidDelete");

            var localVarPath = "/material/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MaterialUuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a specific material object Returns a single material object
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 MaterialUuidGet (string uuid)
        {
             ApiResponse<InlineResponse2005> localVarResponse = MaterialUuidGetWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific material object Returns a single material object
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > MaterialUuidGetWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling GetAndDeleteMaterialsApi->MaterialUuidGet");

            var localVarPath = "/material/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MaterialUuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Get a specific material object Returns a single material object
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> MaterialUuidGetAsync (string uuid)
        {
             ApiResponse<InlineResponse2005> localVarResponse = await MaterialUuidGetAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific material object Returns a single material object
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The unique identifier of the material.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> MaterialUuidGetAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling GetAndDeleteMaterialsApi->MaterialUuidGet");

            var localVarPath = "/material/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MaterialUuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

    }
}
