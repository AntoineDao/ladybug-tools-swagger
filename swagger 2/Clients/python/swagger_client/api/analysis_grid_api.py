# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AnalysisGridApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def analysis_grid_get(self, **kwargs):  # noqa: E501
        """Get a list of analysis_grid objects  # noqa: E501

        Retrieves a list of analysis grids for a given filter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str grid_name: The name of the grid
        :param int min_points: The minimum amount of points the analysis grid has
        :param int max_points: The maximum amount of points the analysis grid has
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.analysis_grid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.analysis_grid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def analysis_grid_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of analysis_grid objects  # noqa: E501

        Retrieves a list of analysis grids for a given filter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str grid_name: The name of the grid
        :param int min_points: The minimum amount of points the analysis grid has
        :param int max_points: The maximum amount of points the analysis grid has
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_name', 'min_points', 'max_points']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analysis_grid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'grid_name' in params:
            query_params.append(('grid_name', params['grid_name']))  # noqa: E501
        if 'min_points' in params:
            query_params.append(('min_points', params['min_points']))  # noqa: E501
        if 'max_points' in params:
            query_params.append(('max_points', params['max_points']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/analysis_grid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analysis_grid_post(self, analysis_grid, **kwargs):  # noqa: E501
        """Create a new analysis_grid file  # noqa: E501

        Adds a new analysis_grid file to the list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_post(analysis_grid, async=True)
        >>> result = thread.get()

        :param async bool
        :param AnalysisGridSchema analysis_grid: A analysis_grid JSON filer with a uuid key. (required)
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.analysis_grid_post_with_http_info(analysis_grid, **kwargs)  # noqa: E501
        else:
            (data) = self.analysis_grid_post_with_http_info(analysis_grid, **kwargs)  # noqa: E501
            return data

    def analysis_grid_post_with_http_info(self, analysis_grid, **kwargs):  # noqa: E501
        """Create a new analysis_grid file  # noqa: E501

        Adds a new analysis_grid file to the list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_post_with_http_info(analysis_grid, async=True)
        >>> result = thread.get()

        :param async bool
        :param AnalysisGridSchema analysis_grid: A analysis_grid JSON filer with a uuid key. (required)
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_grid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analysis_grid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_grid' is set
        if ('analysis_grid' not in params or
                params['analysis_grid'] is None):
            raise ValueError("Missing the required parameter `analysis_grid` when calling `analysis_grid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analysis_grid' in params:
            body_params = params['analysis_grid']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/analysis_grid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse204',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analysis_grid_uuid_delete(self, uuid, **kwargs):  # noqa: E501
        """Delete an existing analysis_grid file  # noqa: E501

        Delete an analysis_grid file in the database specifying the uuid of the file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_uuid_delete(uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str uuid: The unique identifier of the analysis_grid. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.analysis_grid_uuid_delete_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.analysis_grid_uuid_delete_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def analysis_grid_uuid_delete_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Delete an existing analysis_grid file  # noqa: E501

        Delete an analysis_grid file in the database specifying the uuid of the file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_uuid_delete_with_http_info(uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str uuid: The unique identifier of the analysis_grid. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analysis_grid_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `analysis_grid_uuid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/analysis_grid/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analysis_grid_uuid_get(self, uuid, **kwargs):  # noqa: E501
        """Get an analysis_grid object  # noqa: E501

        Returns a single analysis_grid object based on the provided uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_uuid_get(uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str uuid: The unique identifier of the analysis_grid. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.analysis_grid_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.analysis_grid_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def analysis_grid_uuid_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Get an analysis_grid object  # noqa: E501

        Returns a single analysis_grid object based on the provided uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_uuid_get_with_http_info(uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str uuid: The unique identifier of the analysis_grid. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analysis_grid_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `analysis_grid_uuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/analysis_grid/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analysis_grid_uuid_put(self, uuid, analysis_grid, **kwargs):  # noqa: E501
        """Modify an existing analysis_grid file  # noqa: E501

        Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_uuid_put(uuid, analysis_grid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str uuid: The unique identifier of the analysis_grid. (required)
        :param AnalysisGridSchema analysis_grid: A analysis_grid JSON filer with a uuid key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.analysis_grid_uuid_put_with_http_info(uuid, analysis_grid, **kwargs)  # noqa: E501
        else:
            (data) = self.analysis_grid_uuid_put_with_http_info(uuid, analysis_grid, **kwargs)  # noqa: E501
            return data

    def analysis_grid_uuid_put_with_http_info(self, uuid, analysis_grid, **kwargs):  # noqa: E501
        """Modify an existing analysis_grid file  # noqa: E501

        Modifies any parameter (except uuid) of an analysis_grid file by completely replacing the definition file. A finer grain method can be set up later.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.analysis_grid_uuid_put_with_http_info(uuid, analysis_grid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str uuid: The unique identifier of the analysis_grid. (required)
        :param AnalysisGridSchema analysis_grid: A analysis_grid JSON filer with a uuid key. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'analysis_grid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analysis_grid_uuid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `analysis_grid_uuid_put`")  # noqa: E501
        # verify the required parameter 'analysis_grid' is set
        if ('analysis_grid' not in params or
                params['analysis_grid'] is None):
            raise ValueError("Missing the required parameter `analysis_grid` when calling `analysis_grid_uuid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analysis_grid' in params:
            body_params = params['analysis_grid']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/analysis_grid/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
