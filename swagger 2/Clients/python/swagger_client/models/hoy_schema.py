# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.hoy_schema_hoy import HoySchemaHoy  # noqa: F401,E501


class HoySchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hoy_id': 'int',
        'hoy': 'HoySchemaHoy'
    }

    attribute_map = {
        'hoy_id': 'hoy_id',
        'hoy': 'hoy'
    }

    def __init__(self, hoy_id=None, hoy=None):  # noqa: E501
        """HoySchema - a model defined in Swagger"""  # noqa: E501

        self._hoy_id = None
        self._hoy = None
        self.discriminator = None

        if hoy_id is not None:
            self.hoy_id = hoy_id
        if hoy is not None:
            self.hoy = hoy

    @property
    def hoy_id(self):
        """Gets the hoy_id of this HoySchema.  # noqa: E501

        The hour of the year for a given set of results values  # noqa: E501

        :return: The hoy_id of this HoySchema.  # noqa: E501
        :rtype: int
        """
        return self._hoy_id

    @hoy_id.setter
    def hoy_id(self, hoy_id):
        """Sets the hoy_id of this HoySchema.

        The hour of the year for a given set of results values  # noqa: E501

        :param hoy_id: The hoy_id of this HoySchema.  # noqa: E501
        :type: int
        """

        self._hoy_id = hoy_id

    @property
    def hoy(self):
        """Gets the hoy of this HoySchema.  # noqa: E501


        :return: The hoy of this HoySchema.  # noqa: E501
        :rtype: HoySchemaHoy
        """
        return self._hoy

    @hoy.setter
    def hoy(self, hoy):
        """Sets the hoy of this HoySchema.


        :param hoy: The hoy of this HoySchema.  # noqa: E501
        :type: HoySchemaHoy
        """

        self._hoy = hoy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HoySchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
