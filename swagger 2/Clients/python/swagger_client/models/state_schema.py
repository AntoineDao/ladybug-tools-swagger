# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.hoy_schema import HoySchema  # noqa: F401,E501


class StateSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state_id': 'str',
        'state': 'list[HoySchema]'
    }

    attribute_map = {
        'state_id': 'state_id',
        'state': 'state'
    }

    def __init__(self, state_id=None, state=None):  # noqa: E501
        """StateSchema - a model defined in Swagger"""  # noqa: E501

        self._state_id = None
        self._state = None
        self.discriminator = None

        if state_id is not None:
            self.state_id = state_id
        if state is not None:
            self.state = state

    @property
    def state_id(self):
        """Gets the state_id of this StateSchema.  # noqa: E501

        The id of a given state for the source of light  # noqa: E501

        :return: The state_id of this StateSchema.  # noqa: E501
        :rtype: str
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """Sets the state_id of this StateSchema.

        The id of a given state for the source of light  # noqa: E501

        :param state_id: The state_id of this StateSchema.  # noqa: E501
        :type: str
        """

        self._state_id = state_id

    @property
    def state(self):
        """Gets the state of this StateSchema.  # noqa: E501


        :return: The state of this StateSchema.  # noqa: E501
        :rtype: list[HoySchema]
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StateSchema.


        :param state: The state of this StateSchema.  # noqa: E501
        :type: list[HoySchema]
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StateSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
