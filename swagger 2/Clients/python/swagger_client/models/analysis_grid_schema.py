# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.analysis_point_schema import AnalysisPointSchema  # noqa: F401,E501


class AnalysisGridSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'analysis_points': 'list[AnalysisPointSchema]',
        'window_groups': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'analysis_points': 'analysis_points',
        'window_groups': 'window_groups'
    }

    def __init__(self, name=None, analysis_points=None, window_groups=None):  # noqa: E501
        """AnalysisGridSchema - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._analysis_points = None
        self._window_groups = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if analysis_points is not None:
            self.analysis_points = analysis_points
        if window_groups is not None:
            self.window_groups = window_groups

    @property
    def name(self):
        """Gets the name of this AnalysisGridSchema.  # noqa: E501

        The name of the grid  # noqa: E501

        :return: The name of this AnalysisGridSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalysisGridSchema.

        The name of the grid  # noqa: E501

        :param name: The name of this AnalysisGridSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def analysis_points(self):
        """Gets the analysis_points of this AnalysisGridSchema.  # noqa: E501


        :return: The analysis_points of this AnalysisGridSchema.  # noqa: E501
        :rtype: list[AnalysisPointSchema]
        """
        return self._analysis_points

    @analysis_points.setter
    def analysis_points(self, analysis_points):
        """Sets the analysis_points of this AnalysisGridSchema.


        :param analysis_points: The analysis_points of this AnalysisGridSchema.  # noqa: E501
        :type: list[AnalysisPointSchema]
        """

        self._analysis_points = analysis_points

    @property
    def window_groups(self):
        """Gets the window_groups of this AnalysisGridSchema.  # noqa: E501


        :return: The window_groups of this AnalysisGridSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._window_groups

    @window_groups.setter
    def window_groups(self, window_groups):
        """Sets the window_groups of this AnalysisGridSchema.


        :param window_groups: The window_groups of this AnalysisGridSchema.  # noqa: E501
        :type: list[str]
        """

        self._window_groups = window_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisGridSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
