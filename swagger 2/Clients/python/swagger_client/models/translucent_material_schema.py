# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TranslucentMaterialSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'r_transmittance': 'float',
        'g_transmittance': 'float',
        'b_transmittance': 'float',
        'refraction': 'float',
        'modifier': 'str'
    }

    attribute_map = {
        'name': 'name',
        'r_transmittance': 'r_transmittance',
        'g_transmittance': 'g_transmittance',
        'b_transmittance': 'b_transmittance',
        'refraction': 'refraction',
        'modifier': 'modifier'
    }

    def __init__(self, name=None, r_transmittance=None, g_transmittance=None, b_transmittance=None, refraction=None, modifier='void'):  # noqa: E501
        """TranslucentMaterialSchema - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._r_transmittance = None
        self._g_transmittance = None
        self._b_transmittance = None
        self._refraction = None
        self._modifier = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if r_transmittance is not None:
            self.r_transmittance = r_transmittance
        if g_transmittance is not None:
            self.g_transmittance = g_transmittance
        if b_transmittance is not None:
            self.b_transmittance = b_transmittance
        if refraction is not None:
            self.refraction = refraction
        if modifier is not None:
            self.modifier = modifier

    @property
    def name(self):
        """Gets the name of this TranslucentMaterialSchema.  # noqa: E501

        Name of the material  # noqa: E501

        :return: The name of this TranslucentMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TranslucentMaterialSchema.

        Name of the material  # noqa: E501

        :param name: The name of this TranslucentMaterialSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def r_transmittance(self):
        """Gets the r_transmittance of this TranslucentMaterialSchema.  # noqa: E501

        Transmittance for red  # noqa: E501

        :return: The r_transmittance of this TranslucentMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._r_transmittance

    @r_transmittance.setter
    def r_transmittance(self, r_transmittance):
        """Sets the r_transmittance of this TranslucentMaterialSchema.

        Transmittance for red  # noqa: E501

        :param r_transmittance: The r_transmittance of this TranslucentMaterialSchema.  # noqa: E501
        :type: float
        """
        if r_transmittance is not None and r_transmittance > 1:  # noqa: E501
            raise ValueError("Invalid value for `r_transmittance`, must be a value less than or equal to `1`")  # noqa: E501
        if r_transmittance is not None and r_transmittance < 0:  # noqa: E501
            raise ValueError("Invalid value for `r_transmittance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._r_transmittance = r_transmittance

    @property
    def g_transmittance(self):
        """Gets the g_transmittance of this TranslucentMaterialSchema.  # noqa: E501

        Transmittance for green  # noqa: E501

        :return: The g_transmittance of this TranslucentMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._g_transmittance

    @g_transmittance.setter
    def g_transmittance(self, g_transmittance):
        """Sets the g_transmittance of this TranslucentMaterialSchema.

        Transmittance for green  # noqa: E501

        :param g_transmittance: The g_transmittance of this TranslucentMaterialSchema.  # noqa: E501
        :type: float
        """
        if g_transmittance is not None and g_transmittance > 1:  # noqa: E501
            raise ValueError("Invalid value for `g_transmittance`, must be a value less than or equal to `1`")  # noqa: E501
        if g_transmittance is not None and g_transmittance < 0:  # noqa: E501
            raise ValueError("Invalid value for `g_transmittance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._g_transmittance = g_transmittance

    @property
    def b_transmittance(self):
        """Gets the b_transmittance of this TranslucentMaterialSchema.  # noqa: E501

        Transmittance for blue  # noqa: E501

        :return: The b_transmittance of this TranslucentMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._b_transmittance

    @b_transmittance.setter
    def b_transmittance(self, b_transmittance):
        """Sets the b_transmittance of this TranslucentMaterialSchema.

        Transmittance for blue  # noqa: E501

        :param b_transmittance: The b_transmittance of this TranslucentMaterialSchema.  # noqa: E501
        :type: float
        """
        if b_transmittance is not None and b_transmittance > 1:  # noqa: E501
            raise ValueError("Invalid value for `b_transmittance`, must be a value less than or equal to `1`")  # noqa: E501
        if b_transmittance is not None and b_transmittance < 0:  # noqa: E501
            raise ValueError("Invalid value for `b_transmittance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._b_transmittance = b_transmittance

    @property
    def refraction(self):
        """Gets the refraction of this TranslucentMaterialSchema.  # noqa: E501

        Index of refraction  # noqa: E501

        :return: The refraction of this TranslucentMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._refraction

    @refraction.setter
    def refraction(self, refraction):
        """Sets the refraction of this TranslucentMaterialSchema.

        Index of refraction  # noqa: E501

        :param refraction: The refraction of this TranslucentMaterialSchema.  # noqa: E501
        :type: float
        """
        if refraction is not None and refraction > 1:  # noqa: E501
            raise ValueError("Invalid value for `refraction`, must be a value less than or equal to `1`")  # noqa: E501
        if refraction is not None and refraction < 0:  # noqa: E501
            raise ValueError("Invalid value for `refraction`, must be a value greater than or equal to `0`")  # noqa: E501

        self._refraction = refraction

    @property
    def modifier(self):
        """Gets the modifier of this TranslucentMaterialSchema.  # noqa: E501


        :return: The modifier of this TranslucentMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier):
        """Sets the modifier of this TranslucentMaterialSchema.


        :param modifier: The modifier of this TranslucentMaterialSchema.  # noqa: E501
        :type: str
        """

        self._modifier = modifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranslucentMaterialSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
