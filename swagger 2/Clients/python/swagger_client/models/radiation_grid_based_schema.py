# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.analysis_grid_schema import AnalysisGridSchema  # noqa: F401,E501
from swagger_client.models.hb_surface_schema import HBSurfaceSchema  # noqa: F401,E501
from swagger_client.models.radiance_parameters import RadianceParameters  # noqa: F401,E501
from swagger_client.models.sky_mtx_schema import SkyMtxSchema  # noqa: F401,E501


class RadiationGridBasedSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'sky_mtx': 'SkyMtxSchema',
        'analysis_grids': 'list[AnalysisGridSchema]',
        'surfaces': 'list[HBSurfaceSchema]',
        'rad_parameters': 'RadianceParameters'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'sky_mtx': 'sky_mtx',
        'analysis_grids': 'analysis_grids',
        'surfaces': 'surfaces',
        'rad_parameters': 'rad_parameters'
    }

    def __init__(self, id=None, type=None, sky_mtx=None, analysis_grids=None, surfaces=None, rad_parameters=None):  # noqa: E501
        """RadiationGridBasedSchema - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._sky_mtx = None
        self._analysis_grids = None
        self._surfaces = None
        self._rad_parameters = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if sky_mtx is not None:
            self.sky_mtx = sky_mtx
        if analysis_grids is not None:
            self.analysis_grids = analysis_grids
        if surfaces is not None:
            self.surfaces = surfaces
        if rad_parameters is not None:
            self.rad_parameters = rad_parameters

    @property
    def id(self):
        """Gets the id of this RadiationGridBasedSchema.  # noqa: E501


        :return: The id of this RadiationGridBasedSchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RadiationGridBasedSchema.


        :param id: The id of this RadiationGridBasedSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["radiation"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"  # noqa: E501
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def type(self):
        """Gets the type of this RadiationGridBasedSchema.  # noqa: E501


        :return: The type of this RadiationGridBasedSchema.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RadiationGridBasedSchema.


        :param type: The type of this RadiationGridBasedSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["gridbased"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def sky_mtx(self):
        """Gets the sky_mtx of this RadiationGridBasedSchema.  # noqa: E501


        :return: The sky_mtx of this RadiationGridBasedSchema.  # noqa: E501
        :rtype: SkyMtxSchema
        """
        return self._sky_mtx

    @sky_mtx.setter
    def sky_mtx(self, sky_mtx):
        """Sets the sky_mtx of this RadiationGridBasedSchema.


        :param sky_mtx: The sky_mtx of this RadiationGridBasedSchema.  # noqa: E501
        :type: SkyMtxSchema
        """

        self._sky_mtx = sky_mtx

    @property
    def analysis_grids(self):
        """Gets the analysis_grids of this RadiationGridBasedSchema.  # noqa: E501


        :return: The analysis_grids of this RadiationGridBasedSchema.  # noqa: E501
        :rtype: list[AnalysisGridSchema]
        """
        return self._analysis_grids

    @analysis_grids.setter
    def analysis_grids(self, analysis_grids):
        """Sets the analysis_grids of this RadiationGridBasedSchema.


        :param analysis_grids: The analysis_grids of this RadiationGridBasedSchema.  # noqa: E501
        :type: list[AnalysisGridSchema]
        """

        self._analysis_grids = analysis_grids

    @property
    def surfaces(self):
        """Gets the surfaces of this RadiationGridBasedSchema.  # noqa: E501


        :return: The surfaces of this RadiationGridBasedSchema.  # noqa: E501
        :rtype: list[HBSurfaceSchema]
        """
        return self._surfaces

    @surfaces.setter
    def surfaces(self, surfaces):
        """Sets the surfaces of this RadiationGridBasedSchema.


        :param surfaces: The surfaces of this RadiationGridBasedSchema.  # noqa: E501
        :type: list[HBSurfaceSchema]
        """

        self._surfaces = surfaces

    @property
    def rad_parameters(self):
        """Gets the rad_parameters of this RadiationGridBasedSchema.  # noqa: E501


        :return: The rad_parameters of this RadiationGridBasedSchema.  # noqa: E501
        :rtype: RadianceParameters
        """
        return self._rad_parameters

    @rad_parameters.setter
    def rad_parameters(self, rad_parameters):
        """Sets the rad_parameters of this RadiationGridBasedSchema.


        :param rad_parameters: The rad_parameters of this RadiationGridBasedSchema.  # noqa: E501
        :type: RadianceParameters
        """

        self._rad_parameters = rad_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadiationGridBasedSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
