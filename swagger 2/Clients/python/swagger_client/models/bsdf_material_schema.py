# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BSDFMaterialSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'xml_data': 'str',
        'up_orientation': 'float',
        'thickness': 'float',
        'modifier': 'str'
    }

    attribute_map = {
        'name': 'name',
        'xml_data': 'xml_data',
        'up_orientation': 'up_orientation',
        'thickness': 'thickness',
        'modifier': 'modifier'
    }

    def __init__(self, name=None, xml_data=None, up_orientation=None, thickness=None, modifier='void'):  # noqa: E501
        """BSDFMaterialSchema - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._xml_data = None
        self._up_orientation = None
        self._thickness = None
        self._modifier = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if xml_data is not None:
            self.xml_data = xml_data
        if up_orientation is not None:
            self.up_orientation = up_orientation
        if thickness is not None:
            self.thickness = thickness
        if modifier is not None:
            self.modifier = modifier

    @property
    def name(self):
        """Gets the name of this BSDFMaterialSchema.  # noqa: E501

        Name of the material  # noqa: E501

        :return: The name of this BSDFMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BSDFMaterialSchema.

        Name of the material  # noqa: E501

        :param name: The name of this BSDFMaterialSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def xml_data(self):
        """Gets the xml_data of this BSDFMaterialSchema.  # noqa: E501

        A string of the original XML  # noqa: E501

        :return: The xml_data of this BSDFMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._xml_data

    @xml_data.setter
    def xml_data(self, xml_data):
        """Sets the xml_data of this BSDFMaterialSchema.

        A string of the original XML  # noqa: E501

        :param xml_data: The xml_data of this BSDFMaterialSchema.  # noqa: E501
        :type: str
        """

        self._xml_data = xml_data

    @property
    def up_orientation(self):
        """Gets the up_orientation of this BSDFMaterialSchema.  # noqa: E501


        :return: The up_orientation of this BSDFMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._up_orientation

    @up_orientation.setter
    def up_orientation(self, up_orientation):
        """Sets the up_orientation of this BSDFMaterialSchema.


        :param up_orientation: The up_orientation of this BSDFMaterialSchema.  # noqa: E501
        :type: float
        """

        self._up_orientation = up_orientation

    @property
    def thickness(self):
        """Gets the thickness of this BSDFMaterialSchema.  # noqa: E501


        :return: The thickness of this BSDFMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._thickness

    @thickness.setter
    def thickness(self, thickness):
        """Sets the thickness of this BSDFMaterialSchema.


        :param thickness: The thickness of this BSDFMaterialSchema.  # noqa: E501
        :type: float
        """

        self._thickness = thickness

    @property
    def modifier(self):
        """Gets the modifier of this BSDFMaterialSchema.  # noqa: E501


        :return: The modifier of this BSDFMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier):
        """Sets the modifier of this BSDFMaterialSchema.


        :param modifier: The modifier of this BSDFMaterialSchema.  # noqa: E501
        :type: str
        """

        self._modifier = modifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BSDFMaterialSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
