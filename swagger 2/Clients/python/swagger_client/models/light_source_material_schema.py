# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LightSourceMaterialSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'red': 'float',
        'green': 'float',
        'blue': 'float',
        'radius': 'float',
        'modifier': 'str'
    }

    attribute_map = {
        'name': 'name',
        'red': 'red',
        'green': 'green',
        'blue': 'blue',
        'radius': 'radius',
        'modifier': 'modifier'
    }

    def __init__(self, name=None, red=None, green=None, blue=None, radius=None, modifier='void'):  # noqa: E501
        """LightSourceMaterialSchema - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._red = None
        self._green = None
        self._blue = None
        self._radius = None
        self._modifier = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if red is not None:
            self.red = red
        if green is not None:
            self.green = green
        if blue is not None:
            self.blue = blue
        if radius is not None:
            self.radius = radius
        if modifier is not None:
            self.modifier = modifier

    @property
    def name(self):
        """Gets the name of this LightSourceMaterialSchema.  # noqa: E501

        Name of the material  # noqa: E501

        :return: The name of this LightSourceMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LightSourceMaterialSchema.

        Name of the material  # noqa: E501

        :param name: The name of this LightSourceMaterialSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def red(self):
        """Gets the red of this LightSourceMaterialSchema.  # noqa: E501

        A positive value for the Red channel of the glow  # noqa: E501

        :return: The red of this LightSourceMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._red

    @red.setter
    def red(self, red):
        """Sets the red of this LightSourceMaterialSchema.

        A positive value for the Red channel of the glow  # noqa: E501

        :param red: The red of this LightSourceMaterialSchema.  # noqa: E501
        :type: float
        """
        if red is not None and red > 1:  # noqa: E501
            raise ValueError("Invalid value for `red`, must be a value less than or equal to `1`")  # noqa: E501
        if red is not None and red < 0:  # noqa: E501
            raise ValueError("Invalid value for `red`, must be a value greater than or equal to `0`")  # noqa: E501

        self._red = red

    @property
    def green(self):
        """Gets the green of this LightSourceMaterialSchema.  # noqa: E501

        A positive value for the Green channel of the glow  # noqa: E501

        :return: The green of this LightSourceMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._green

    @green.setter
    def green(self, green):
        """Sets the green of this LightSourceMaterialSchema.

        A positive value for the Green channel of the glow  # noqa: E501

        :param green: The green of this LightSourceMaterialSchema.  # noqa: E501
        :type: float
        """
        if green is not None and green > 1:  # noqa: E501
            raise ValueError("Invalid value for `green`, must be a value less than or equal to `1`")  # noqa: E501
        if green is not None and green < 0:  # noqa: E501
            raise ValueError("Invalid value for `green`, must be a value greater than or equal to `0`")  # noqa: E501

        self._green = green

    @property
    def blue(self):
        """Gets the blue of this LightSourceMaterialSchema.  # noqa: E501

        A positive value for the Blue channel of the glow  # noqa: E501

        :return: The blue of this LightSourceMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._blue

    @blue.setter
    def blue(self, blue):
        """Sets the blue of this LightSourceMaterialSchema.

        A positive value for the Blue channel of the glow  # noqa: E501

        :param blue: The blue of this LightSourceMaterialSchema.  # noqa: E501
        :type: float
        """
        if blue is not None and blue > 1:  # noqa: E501
            raise ValueError("Invalid value for `blue`, must be a value less than or equal to `1`")  # noqa: E501
        if blue is not None and blue < 0:  # noqa: E501
            raise ValueError("Invalid value for `blue`, must be a value greater than or equal to `0`")  # noqa: E501

        self._blue = blue

    @property
    def radius(self):
        """Gets the radius of this LightSourceMaterialSchema.  # noqa: E501

        Maximum radius for shadow testing  # noqa: E501

        :return: The radius of this LightSourceMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this LightSourceMaterialSchema.

        Maximum radius for shadow testing  # noqa: E501

        :param radius: The radius of this LightSourceMaterialSchema.  # noqa: E501
        :type: float
        """

        self._radius = radius

    @property
    def modifier(self):
        """Gets the modifier of this LightSourceMaterialSchema.  # noqa: E501


        :return: The modifier of this LightSourceMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier):
        """Sets the modifier of this LightSourceMaterialSchema.


        :param modifier: The modifier of this LightSourceMaterialSchema.  # noqa: E501
        :type: str
        """

        self._modifier = modifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LightSourceMaterialSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
