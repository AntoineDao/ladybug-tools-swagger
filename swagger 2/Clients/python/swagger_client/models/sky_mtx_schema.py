# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.hoys_schema import HoysSchema  # noqa: F401,E501
from swagger_client.models.wea_schema import WeaSchema  # noqa: F401,E501


class SkyMtxSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wea': 'WeaSchema',
        'sky_density': 'int',
        'north': 'float',
        'hoys': 'HoysSchema',
        'mode': 'int',
        'suffix': 'str'
    }

    attribute_map = {
        'wea': 'wea',
        'sky_density': 'sky_density',
        'north': 'north',
        'hoys': 'hoys',
        'mode': 'mode',
        'suffix': 'suffix'
    }

    def __init__(self, wea=None, sky_density=None, north=None, hoys=None, mode=None, suffix=None):  # noqa: E501
        """SkyMtxSchema - a model defined in Swagger"""  # noqa: E501

        self._wea = None
        self._sky_density = None
        self._north = None
        self._hoys = None
        self._mode = None
        self._suffix = None
        self.discriminator = None

        if wea is not None:
            self.wea = wea
        if sky_density is not None:
            self.sky_density = sky_density
        if north is not None:
            self.north = north
        if hoys is not None:
            self.hoys = hoys
        if mode is not None:
            self.mode = mode
        if suffix is not None:
            self.suffix = suffix

    @property
    def wea(self):
        """Gets the wea of this SkyMtxSchema.  # noqa: E501


        :return: The wea of this SkyMtxSchema.  # noqa: E501
        :rtype: WeaSchema
        """
        return self._wea

    @wea.setter
    def wea(self, wea):
        """Sets the wea of this SkyMtxSchema.


        :param wea: The wea of this SkyMtxSchema.  # noqa: E501
        :type: WeaSchema
        """

        self._wea = wea

    @property
    def sky_density(self):
        """Gets the sky_density of this SkyMtxSchema.  # noqa: E501

        1 - Tregenza Sky, 2 - Reinhart Sky, etc. (Default - 1)  # noqa: E501

        :return: The sky_density of this SkyMtxSchema.  # noqa: E501
        :rtype: int
        """
        return self._sky_density

    @sky_density.setter
    def sky_density(self, sky_density):
        """Sets the sky_density of this SkyMtxSchema.

        1 - Tregenza Sky, 2 - Reinhart Sky, etc. (Default - 1)  # noqa: E501

        :param sky_density: The sky_density of this SkyMtxSchema.  # noqa: E501
        :type: int
        """

        self._sky_density = sky_density

    @property
    def north(self):
        """Gets the north of this SkyMtxSchema.  # noqa: E501

        angle in degrees between 0-360 to indicate North  # noqa: E501

        :return: The north of this SkyMtxSchema.  # noqa: E501
        :rtype: float
        """
        return self._north

    @north.setter
    def north(self, north):
        """Sets the north of this SkyMtxSchema.

        angle in degrees between 0-360 to indicate North  # noqa: E501

        :param north: The north of this SkyMtxSchema.  # noqa: E501
        :type: float
        """
        if north is not None and north > 360:  # noqa: E501
            raise ValueError("Invalid value for `north`, must be a value less than or equal to `360`")  # noqa: E501
        if north is not None and north < 0:  # noqa: E501
            raise ValueError("Invalid value for `north`, must be a value greater than or equal to `0`")  # noqa: E501

        self._north = north

    @property
    def hoys(self):
        """Gets the hoys of this SkyMtxSchema.  # noqa: E501


        :return: The hoys of this SkyMtxSchema.  # noqa: E501
        :rtype: HoysSchema
        """
        return self._hoys

    @hoys.setter
    def hoys(self, hoys):
        """Sets the hoys of this SkyMtxSchema.


        :param hoys: The hoys of this SkyMtxSchema.  # noqa: E501
        :type: HoysSchema
        """

        self._hoys = hoys

    @property
    def mode(self):
        """Gets the mode of this SkyMtxSchema.  # noqa: E501

        sky mode  # noqa: E501

        :return: The mode of this SkyMtxSchema.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SkyMtxSchema.

        sky mode  # noqa: E501

        :param mode: The mode of this SkyMtxSchema.  # noqa: E501
        :type: int
        """

        self._mode = mode

    @property
    def suffix(self):
        """Gets the suffix of this SkyMtxSchema.  # noqa: E501

        Suffix for the sky matrix  # noqa: E501

        :return: The suffix of this SkyMtxSchema.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this SkyMtxSchema.

        Suffix for the sky matrix  # noqa: E501

        :param suffix: The suffix of this SkyMtxSchema.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkyMtxSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
