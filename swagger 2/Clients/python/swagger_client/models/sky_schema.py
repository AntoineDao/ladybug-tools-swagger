# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.location_schema import LocationSchema  # noqa: F401,E501


class SkySchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'LocationSchema',
        'hour': 'int',
        'day': 'int',
        'month': 'int',
        'north': 'float',
        'sky_type': 'int'
    }

    attribute_map = {
        'location': 'location',
        'hour': 'hour',
        'day': 'day',
        'month': 'month',
        'north': 'north',
        'sky_type': 'sky_type'
    }

    def __init__(self, location=None, hour=None, day=None, month=None, north=None, sky_type=None):  # noqa: E501
        """SkySchema - a model defined in Swagger"""  # noqa: E501

        self._location = None
        self._hour = None
        self._day = None
        self._month = None
        self._north = None
        self._sky_type = None
        self.discriminator = None

        if location is not None:
            self.location = location
        if hour is not None:
            self.hour = hour
        if day is not None:
            self.day = day
        if month is not None:
            self.month = month
        if north is not None:
            self.north = north
        if sky_type is not None:
            self.sky_type = sky_type

    @property
    def location(self):
        """Gets the location of this SkySchema.  # noqa: E501


        :return: The location of this SkySchema.  # noqa: E501
        :rtype: LocationSchema
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SkySchema.


        :param location: The location of this SkySchema.  # noqa: E501
        :type: LocationSchema
        """

        self._location = location

    @property
    def hour(self):
        """Gets the hour of this SkySchema.  # noqa: E501

        hour of the day - minvalue 0 and max value 23  # noqa: E501

        :return: The hour of this SkySchema.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this SkySchema.

        hour of the day - minvalue 0 and max value 23  # noqa: E501

        :param hour: The hour of this SkySchema.  # noqa: E501
        :type: int
        """

        self._hour = hour

    @property
    def day(self):
        """Gets the day of this SkySchema.  # noqa: E501

        day of the month - minvalue 1 and max value 31  # noqa: E501

        :return: The day of this SkySchema.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this SkySchema.

        day of the month - minvalue 1 and max value 31  # noqa: E501

        :param day: The day of this SkySchema.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def month(self):
        """Gets the month of this SkySchema.  # noqa: E501

        month of the year - minvalue 1 and max value 12  # noqa: E501

        :return: The month of this SkySchema.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this SkySchema.

        month of the year - minvalue 1 and max value 12  # noqa: E501

        :param month: The month of this SkySchema.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def north(self):
        """Gets the north of this SkySchema.  # noqa: E501

        angle in degrees between 0-360 to indicate North  # noqa: E501

        :return: The north of this SkySchema.  # noqa: E501
        :rtype: float
        """
        return self._north

    @north.setter
    def north(self, north):
        """Sets the north of this SkySchema.

        angle in degrees between 0-360 to indicate North  # noqa: E501

        :param north: The north of this SkySchema.  # noqa: E501
        :type: float
        """

        self._north = north

    @property
    def sky_type(self):
        """Gets the sky_type of this SkySchema.  # noqa: E501

        0 - Sunny with sun, 1 - sunny without sun, 2 - intermediate with sun, 3 - intermediate without sun, 4 - cloudy sky, 5 - uniform sky  # noqa: E501

        :return: The sky_type of this SkySchema.  # noqa: E501
        :rtype: int
        """
        return self._sky_type

    @sky_type.setter
    def sky_type(self, sky_type):
        """Sets the sky_type of this SkySchema.

        0 - Sunny with sun, 1 - sunny without sun, 2 - intermediate with sun, 3 - intermediate without sun, 4 - cloudy sky, 5 - uniform sky  # noqa: E501

        :param sky_type: The sky_type of this SkySchema.  # noqa: E501
        :type: int
        """

        self._sky_type = sky_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkySchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
