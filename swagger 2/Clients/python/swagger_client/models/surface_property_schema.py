# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.material_schema import MaterialSchema  # noqa: F401,E501


class SurfacePropertySchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'surface_type': 'float',
        'rad_properties': 'MaterialSchema'
    }

    attribute_map = {
        'surface_type': 'surface_type',
        'rad_properties': 'rad_properties'
    }

    def __init__(self, surface_type=None, rad_properties=None):  # noqa: E501
        """SurfacePropertySchema - a model defined in Swagger"""  # noqa: E501

        self._surface_type = None
        self._rad_properties = None
        self.discriminator = None

        if surface_type is not None:
            self.surface_type = surface_type
        if rad_properties is not None:
            self.rad_properties = rad_properties

    @property
    def surface_type(self):
        """Gets the surface_type of this SurfacePropertySchema.  # noqa: E501

        0.0=Wall, 0.5=UndergroundWall, 1.0=Roof, 1.5=UndergroundCeiling, 2.0=Floor, 2.5=SlabOnGrade, 2.75=ExposedFloor, 3.0=Ceiling, 5.0=Window, 6.0=Context  # noqa: E501

        :return: The surface_type of this SurfacePropertySchema.  # noqa: E501
        :rtype: float
        """
        return self._surface_type

    @surface_type.setter
    def surface_type(self, surface_type):
        """Sets the surface_type of this SurfacePropertySchema.

        0.0=Wall, 0.5=UndergroundWall, 1.0=Roof, 1.5=UndergroundCeiling, 2.0=Floor, 2.5=SlabOnGrade, 2.75=ExposedFloor, 3.0=Ceiling, 5.0=Window, 6.0=Context  # noqa: E501

        :param surface_type: The surface_type of this SurfacePropertySchema.  # noqa: E501
        :type: float
        """
        if surface_type is not None and surface_type > 6:  # noqa: E501
            raise ValueError("Invalid value for `surface_type`, must be a value less than or equal to `6`")  # noqa: E501
        if surface_type is not None and surface_type < 0:  # noqa: E501
            raise ValueError("Invalid value for `surface_type`, must be a value greater than or equal to `0`")  # noqa: E501

        self._surface_type = surface_type

    @property
    def rad_properties(self):
        """Gets the rad_properties of this SurfacePropertySchema.  # noqa: E501


        :return: The rad_properties of this SurfacePropertySchema.  # noqa: E501
        :rtype: MaterialSchema
        """
        return self._rad_properties

    @rad_properties.setter
    def rad_properties(self, rad_properties):
        """Sets the rad_properties of this SurfacePropertySchema.


        :param rad_properties: The rad_properties of this SurfacePropertySchema.  # noqa: E501
        :type: MaterialSchema
        """

        self._rad_properties = rad_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurfacePropertySchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
