# coding: utf-8

"""
    Honeybee Server API

    A sample API definition for a honeybee server  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OpaqueMaterialSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'r_reflectance': 'float',
        'g_reflectance': 'float',
        'b_reflectance': 'float',
        'refraction': 'float',
        'specularity': 'float',
        'roughness': 'float',
        'modifier': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'r_reflectance': 'r_reflectance',
        'g_reflectance': 'g_reflectance',
        'b_reflectance': 'b_reflectance',
        'refraction': 'refraction',
        'specularity': 'specularity',
        'roughness': 'roughness',
        'modifier': 'modifier'
    }

    def __init__(self, name=None, type=None, r_reflectance=None, g_reflectance=None, b_reflectance=None, refraction=None, specularity=None, roughness=None, modifier='void'):  # noqa: E501
        """OpaqueMaterialSchema - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._r_reflectance = None
        self._g_reflectance = None
        self._b_reflectance = None
        self._refraction = None
        self._specularity = None
        self._roughness = None
        self._modifier = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if r_reflectance is not None:
            self.r_reflectance = r_reflectance
        if g_reflectance is not None:
            self.g_reflectance = g_reflectance
        if b_reflectance is not None:
            self.b_reflectance = b_reflectance
        if refraction is not None:
            self.refraction = refraction
        if specularity is not None:
            self.specularity = specularity
        if roughness is not None:
            self.roughness = roughness
        if modifier is not None:
            self.modifier = modifier

    @property
    def name(self):
        """Gets the name of this OpaqueMaterialSchema.  # noqa: E501

        Name of the material  # noqa: E501

        :return: The name of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpaqueMaterialSchema.

        Name of the material  # noqa: E501

        :param name: The name of this OpaqueMaterialSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this OpaqueMaterialSchema.  # noqa: E501

        Material type  # noqa: E501

        :return: The type of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OpaqueMaterialSchema.

        Material type  # noqa: E501

        :param type: The type of this OpaqueMaterialSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["metal", "plastic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def r_reflectance(self):
        """Gets the r_reflectance of this OpaqueMaterialSchema.  # noqa: E501

        Reflectance for red  # noqa: E501

        :return: The r_reflectance of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._r_reflectance

    @r_reflectance.setter
    def r_reflectance(self, r_reflectance):
        """Sets the r_reflectance of this OpaqueMaterialSchema.

        Reflectance for red  # noqa: E501

        :param r_reflectance: The r_reflectance of this OpaqueMaterialSchema.  # noqa: E501
        :type: float
        """
        if r_reflectance is not None and r_reflectance > 1:  # noqa: E501
            raise ValueError("Invalid value for `r_reflectance`, must be a value less than or equal to `1`")  # noqa: E501
        if r_reflectance is not None and r_reflectance < 0:  # noqa: E501
            raise ValueError("Invalid value for `r_reflectance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._r_reflectance = r_reflectance

    @property
    def g_reflectance(self):
        """Gets the g_reflectance of this OpaqueMaterialSchema.  # noqa: E501

        Reflectance for green  # noqa: E501

        :return: The g_reflectance of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._g_reflectance

    @g_reflectance.setter
    def g_reflectance(self, g_reflectance):
        """Sets the g_reflectance of this OpaqueMaterialSchema.

        Reflectance for green  # noqa: E501

        :param g_reflectance: The g_reflectance of this OpaqueMaterialSchema.  # noqa: E501
        :type: float
        """
        if g_reflectance is not None and g_reflectance > 1:  # noqa: E501
            raise ValueError("Invalid value for `g_reflectance`, must be a value less than or equal to `1`")  # noqa: E501
        if g_reflectance is not None and g_reflectance < 0:  # noqa: E501
            raise ValueError("Invalid value for `g_reflectance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._g_reflectance = g_reflectance

    @property
    def b_reflectance(self):
        """Gets the b_reflectance of this OpaqueMaterialSchema.  # noqa: E501

        Reflectance for blue  # noqa: E501

        :return: The b_reflectance of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._b_reflectance

    @b_reflectance.setter
    def b_reflectance(self, b_reflectance):
        """Sets the b_reflectance of this OpaqueMaterialSchema.

        Reflectance for blue  # noqa: E501

        :param b_reflectance: The b_reflectance of this OpaqueMaterialSchema.  # noqa: E501
        :type: float
        """
        if b_reflectance is not None and b_reflectance > 1:  # noqa: E501
            raise ValueError("Invalid value for `b_reflectance`, must be a value less than or equal to `1`")  # noqa: E501
        if b_reflectance is not None and b_reflectance < 0:  # noqa: E501
            raise ValueError("Invalid value for `b_reflectance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._b_reflectance = b_reflectance

    @property
    def refraction(self):
        """Gets the refraction of this OpaqueMaterialSchema.  # noqa: E501

        Index of refraction  # noqa: E501

        :return: The refraction of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._refraction

    @refraction.setter
    def refraction(self, refraction):
        """Sets the refraction of this OpaqueMaterialSchema.

        Index of refraction  # noqa: E501

        :param refraction: The refraction of this OpaqueMaterialSchema.  # noqa: E501
        :type: float
        """
        if refraction is not None and refraction > 1:  # noqa: E501
            raise ValueError("Invalid value for `refraction`, must be a value less than or equal to `1`")  # noqa: E501
        if refraction is not None and refraction < 0:  # noqa: E501
            raise ValueError("Invalid value for `refraction`, must be a value greater than or equal to `0`")  # noqa: E501

        self._refraction = refraction

    @property
    def specularity(self):
        """Gets the specularity of this OpaqueMaterialSchema.  # noqa: E501

        Material specularity  # noqa: E501

        :return: The specularity of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._specularity

    @specularity.setter
    def specularity(self, specularity):
        """Sets the specularity of this OpaqueMaterialSchema.

        Material specularity  # noqa: E501

        :param specularity: The specularity of this OpaqueMaterialSchema.  # noqa: E501
        :type: float
        """

        self._specularity = specularity

    @property
    def roughness(self):
        """Gets the roughness of this OpaqueMaterialSchema.  # noqa: E501

        Material roughness  # noqa: E501

        :return: The roughness of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: float
        """
        return self._roughness

    @roughness.setter
    def roughness(self, roughness):
        """Sets the roughness of this OpaqueMaterialSchema.

        Material roughness  # noqa: E501

        :param roughness: The roughness of this OpaqueMaterialSchema.  # noqa: E501
        :type: float
        """

        self._roughness = roughness

    @property
    def modifier(self):
        """Gets the modifier of this OpaqueMaterialSchema.  # noqa: E501


        :return: The modifier of this OpaqueMaterialSchema.  # noqa: E501
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier):
        """Sets the modifier of this OpaqueMaterialSchema.


        :param modifier: The modifier of this OpaqueMaterialSchema.  # noqa: E501
        :type: str
        """

        self._modifier = modifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpaqueMaterialSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
